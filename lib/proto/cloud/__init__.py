# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/cloud/analysis.proto, proto/cloud/app_device_info.proto, proto/cloud/ble.proto, proto/cloud/clean_param.proto, proto/cloud/clean_record.proto, proto/cloud/clean_record_wrap.proto, proto/cloud/clean_statistics.proto, proto/cloud/common.proto, proto/cloud/consumable.proto, proto/cloud/control.proto, proto/cloud/debug.proto, proto/cloud/error_code.proto, proto/cloud/keepalive.proto, proto/cloud/language.proto, proto/cloud/map_edit.proto, proto/cloud/map_manage.proto, proto/cloud/media_manager.proto, proto/cloud/misc.proto, proto/cloud/multi_maps.proto, proto/cloud/scene.proto, proto/cloud/socket.proto, proto/cloud/station.proto, proto/cloud/timing.proto, proto/cloud/undisturbed.proto, proto/cloud/unisetting.proto, proto/cloud/universal_data.proto, proto/cloud/upgrade.proto, proto/cloud/version.proto, proto/cloud/work_status.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from . import (
    p2p,
    stream,
)


class AnalysisStatisticsCleanRecordFailCode(betterproto.Enum):
    UNKNOW = 0
    ROBOT_FAULT = 1
    """
    *
    清洁过程机器原因触发异常导致停机，用户介入恢复清洁并成功后也判断为清洁失败;
    下面情况也算:
    脱困失败；
    断点续扫回充失败;
    回洗失败；
    """

    ROBOT_ALERT = 2
    """
    *
    不受机器控制的报警，比如水箱满、托盘不在位等
    """

    MANUAL_BREAK = 3
    """
    *
    用户干预，比如清洁中暂停按回充(或直接搬到基站上)、清洁中切换模式等
    """


class AnalysisStatisticsCleanRecordMode(betterproto.Enum):
    AUTO_CLEAN = 0
    SELECT_ROOMS_CLEAN = 1
    SELECT_ZONES_CLEAN = 2
    SPOT_CLEAN = 3
    FAST_MAPPING = 4


class AnalysisStatisticsCleanRecordType(betterproto.Enum):
    SWEEP_ONLY = 0
    MOP_ONLY = 1
    SWEEP_AND_MOP = 2


class AnalysisStatisticsGoHomeRecordFailCode(betterproto.Enum):
    UNKNOW = 0
    MANUAL_BREAK = 1
    NAVIGATE_FAIL = 2
    ENTER_HOME_FAIL = 3


class AnalysisStatisticsControlEventType(betterproto.Enum):
    AUTO_CLEAN = 0
    SPOT_CLEAN = 1
    GOHOME = 2
    CLEAN_PAUSE = 3
    CLEAN_RESUME = 4


class AnalysisStatisticsControlEventSource(betterproto.Enum):
    KEY = 0
    APP = 1
    TIMER = 2


class AnalysisStatisticsDistributeEventMode(betterproto.Enum):
    AP = 0
    BLE = 1


class AnalysisStatisticsDistributeEventResult(betterproto.Enum):
    E_OK = 0
    E_SRV_ERR = 1
    E_AP_NOT_FOUND = 2
    E_PASSWD_ERR = 3
    E_DHCP_ERR = 4
    E_GW_ERR = 5
    E_DNS_ERR = 6
    E_NET_ERR = 7


class Global(betterproto.Enum):
    NONE = 0
    PROTO_VERSION = 1


class ProtoInfoCollectDustOptionBit(betterproto.Enum):
    COLLECT_DUST_APP_START = 0


class ProtoInfoMapFormatOptionBit(betterproto.Enum):
    MAP_FORMAT_ANGLE = 0
    MAP_FORMAT_RESERVE_MAP = 1
    MAP_FORMAT_DEFAULT_NAME = 2


class ProtoInfoContinueCleanOptionBit(betterproto.Enum):
    SMART_CONTINUE_CLEAN = 0


class ProtoInfoTimingOptionBit(betterproto.Enum):
    SCHEDULE_ROOMS_CLEAN_CUSTOM = 0
    SCHEDULE_SCENE_CLEAN = 1


class AppFunctionMultiMapsFunctionBit(betterproto.Enum):
    REMIND_MAP_SAVE = 0


class AppFunctionOptimizationFunctionBit(betterproto.Enum):
    PATH_HIDE_TYPE = 0


class AppInfoPlatform(betterproto.Enum):
    PF_OTHER = 0
    PF_ANDROID = 1
    PF_IOS = 2
    PF_CLOUD = 3


class AppInfoDataCenter(betterproto.Enum):
    EU = 0
    AZ = 1
    AY = 2


class BtRobotMsgProductInfoResult(betterproto.Enum):
    E_OK = 0
    E_FAIL = 1


class BtRobotMsgDistributeResultValue(betterproto.Enum):
    E_OK = 0
    E_SRV_ERR = 1
    E_AP_NOT_FOUND = 2
    E_PASSWD_ERR = 3
    E_DHCP_ERR = 4
    E_GW_ERR = 5
    E_DNS_ERR = 6
    E_NET_ERR = 7


class FloorType(betterproto.Enum):
    UNKNOW = 0
    BLANKET = 1
    WOOD = 2
    CERAMIC = 3


class RoomSceneType(betterproto.Enum):
    UNKNOW = 0
    STUDYROOM = 1
    BEDROOM = 2
    RESTROOM = 3
    KITCHEN = 4
    LIVINGROOM = 5
    DININGROOM = 6
    CORRIDOR = 7


class FanSuction(betterproto.Enum):
    QUIET = 0
    STANDARD = 1
    TURBO = 2
    MAX = 3
    MAX_PLUS = 4


class MopModeLevel(betterproto.Enum):
    LOW = 0
    MIDDLE = 1
    HIGH = 2


class MopModeCornerClean(betterproto.Enum):
    NORMAL = 0
    DEEP = 1


class CleanCarpetStrategy(betterproto.Enum):
    AUTO_RAISE = 0
    AVOID = 1
    IGNORE = 2


class CleanTypeValue(betterproto.Enum):
    SWEEP_ONLY = 0
    MOP_ONLY = 1
    SWEEP_AND_MOP = 2
    SWEEP_THEN_MOP = 3


class CleanExtentValue(betterproto.Enum):
    NORMAL = 0
    NARROW = 1
    QUICK = 2


class RemoteCtrlDirection(betterproto.Enum):
    BRAKE = 0
    FORWARD = 1
    BACK = 2
    LEFT = 3
    RIGHT = 4


class SelectRoomsCleanMode(betterproto.Enum):
    GENERAL = 0
    CUSTOMIZE = 1


class SelectZonesCleanType(betterproto.Enum):
    NORMAL = 0
    POOP_CLEANING = 1


class GotoType(betterproto.Enum):
    GOTO_DESTINATION = 0
    GOTO_SPOT = 1
    GOTO_AUTO = 2


class ModeCtrlRequestMethod(betterproto.Enum):
    START_AUTO_CLEAN = 0
    START_SELECT_ROOMS_CLEAN = 1
    START_SELECT_ZONES_CLEAN = 2
    START_SPOT_CLEAN = 3
    START_GOTO_CLEAN = 4
    START_RC_CLEAN = 5
    START_GOHOME = 6
    START_SCHEDULE_AUTO_CLEAN = 7
    START_SCHEDULE_ROOMS_CLEAN = 8
    START_FAST_MAPPING = 9
    START_GOWASH = 10
    STOP_TASK = 12
    PAUSE_TASK = 13
    RESUME_TASK = 14
    STOP_GOHOME = 15
    STOP_RC_CLEAN = 16
    STOP_GOWASH = 17
    STOP_SMART_FOLLOW = 18
    START_GLOBAL_CRUISE = 20
    START_POINT_CRUISE = 21
    START_ZONES_CRUISE = 22
    START_SCHEDULE_CRUISE = 23
    START_SCENE_CLEAN = 24
    START_MAPPING_THEN_CLEAN = 25


class ModeCtrlResponseResult(betterproto.Enum):
    SUCCESS = 0
    FAILED = 1


class TimerInfoDescTrigger(betterproto.Enum):
    SINGLE = 0
    CYCLE = 1


class TimerInfoActionType(betterproto.Enum):
    SCHEDULE_AUTO_CLEAN = 0
    SCHEDULE_ROOMS_CLEAN = 1
    SCHEDULE_CRUISE = 2
    SCHEDULE_SCENE_CLEAN = 3


class TimerInfoActionMode(betterproto.Enum):
    GENERAL = 0
    CUSTOMIZE = 1


class TimerRequestMethod(betterproto.Enum):
    DEFAULT = 0
    ADD = 1
    DELETE = 2
    MOTIFY = 3
    OPEN = 4
    CLOSE = 5
    INQUIRY = 6
    IGNORE_ONCE = 7


class TimerResponseResultValue(betterproto.Enum):
    SUCCESS = 0
    FAILED = 1


class SceneTaskType(betterproto.Enum):
    CURRENT_ROOM = 0
    ALL_ROOMS = 1


class SceneTaskCleanMode(betterproto.Enum):
    GENERAL = 0
    SMART = 1


class SceneInfoInvalidReason(betterproto.Enum):
    NORMAL = 0
    MAP_NOT_EXIST = 1
    MAP_NOT_AVAILABLE = 2
    MAP_NOT_MATCH = 3
    OTHER = 4
    DEFAULT = 5


class SceneInfoType(betterproto.Enum):
    SCENE_NORMAL = 0
    WHOLE_HOUSE_DAILY_CLEANING = 1
    WHOLE_HOUSE_DEEP_CLEANING = 2
    AFTER_DINNER_CLEANING = 3
    PET_AREA_CLEANING = 4


class SceneRequestMethod(betterproto.Enum):
    DEFAULT = 0
    ADD_SCENE = 1
    DELETE_SCENE = 2
    MODIFY_SCENE = 3


class SceneResponseResultValue(betterproto.Enum):
    SUCCESS = 0
    FAILED = 1


class CleanRecordDescFinishReason(betterproto.Enum):
    COMPLETED = 0
    MANUDAL = 1
    LOW_POWER = 2
    EXCEPTION = 3


class CleanRecordDescExtraMode(betterproto.Enum):
    AUTO = 0
    SELECT_ROOM = 1
    SELECT_ZONE = 2
    SPOT = 3
    SCHEDULE_AUTO_CLEAN = 4
    SCHEDULE_ROOMS_CLEAN = 5


class CruiseRecordDescFinishReason(betterproto.Enum):
    COMPLETED = 0
    MANUDAL = 1
    LOW_POWER = 2
    EXCEPTION = 3


class CruiseRecordDescExtraMode(betterproto.Enum):
    GLOBAL_CRUISE = 0
    POINT_CRUISE = 1
    ZONES_CRUISE = 2
    SCHEDULE_CRUISE = 3


class ConsumableRequestType(betterproto.Enum):
    SIDE_BRUSH = 0
    ROLLING_BRUSH = 1
    FILTER_MESH = 2
    SCRAPE = 3
    SENSOR = 4
    MOP = 5
    DUSTBAG = 6
    DIRTY_WATERTANK = 7
    DIRTY_WATERFILTER = 8


class ErrorCodeObstacleReminderType(betterproto.Enum):
    POOP = 0


class LanguageRequestSelectionValue(betterproto.Enum):
    DEFAULT = 0
    USER = 1


class LanguageResponseState(betterproto.Enum):
    IDLE = 0
    UPDATING = 1
    SUCCESS = 2
    FAILURE = 3


class MapEditRequestMethod(betterproto.Enum):
    MERGE_ROOMS = 0
    DIVIDE_ROOM = 1
    RESET_ROOMS = 2
    RENAME_ROOM = 3
    SET_RESTRICTED_ZONES = 4
    SET_ROOMS_CUSTOM = 5
    SET_CRUISE_POINTS = 6
    ROTATION = 7
    IGNORE_OBSTACLE = 8


class MapEditRequestRoomsCustomCondition(betterproto.Enum):
    GENERAL = 0
    RESERVATION_IN_PROGRESS = 1


class MapEditResponseResult(betterproto.Enum):
    SUCCESS = 0
    STARTED = 1
    FAILED = 2


class MapEditResponseFailCodeValue(betterproto.Enum):
    UNKNOWN = 0
    AREA_SMALL = 1
    ROOM_UNADJACENT = 2
    TOO_MANY_ROOMS = 3


class MediaSettingResolution(betterproto.Enum):
    R_480P = 0
    R_720P = 1
    R_1080P = 2


class MediaStatusState(betterproto.Enum):
    IDLE = 0
    RECORDING = 1


class MediaStatusStorage(betterproto.Enum):
    NORMAL = 0
    THRESHOLD = 1
    FULL = 2


class MediaManagerRequestControlMethod(betterproto.Enum):
    RECORD_START = 0
    RECORD_STOP = 1
    CAPTURE = 2


class MediaManagerResponseControlResult(betterproto.Enum):
    SUCCESS = 0
    FAIL = 1


class MediaManagerResponseBindMediaSvcResult(betterproto.Enum):
    SUCCESS = 0
    FAIL = 1


class MultiMapsManageRequestMethod(betterproto.Enum):
    MAP_RESET = 0
    MAP_RENAME = 1
    MAP_LOAD = 2
    MAP_REPLACE = 3
    MAP_DELETE = 4
    MAP_SAVE = 5
    MAP_IGNORE = 6
    MAP_GET_ALL = 7
    MAP_GET_ONE = 8
    MAP_RECOVERY = 9


class MultiMapsManageResponseResult(betterproto.Enum):
    SUCCESS = 0
    FAILED = 1
    STARTED = 2


class SocketTransDataType(betterproto.Enum):
    E_DISTRIBUTE = 0
    E_DP = 1


class DurationLevel(betterproto.Enum):
    SHORT = 0
    MEDIUM = 1
    LONG = 2


class CollectDustCfgCfg(betterproto.Enum):
    CLOSE = 0
    ONCE = 1
    TWICE = 2


class CollectDustCfgV2ModeValue(betterproto.Enum):
    BY_TASK = 0
    BY_TIME = 1


class DryCfgCfg(betterproto.Enum):
    CLOSE = 0
    STANDARD = 1
    QUICK = 2


class WashCfgCfg(betterproto.Enum):
    """自动洗拖布开关"""

    CLOSE = 0
    STANDARD = 1


class WashCfgBackwashFreqMode(betterproto.Enum):
    ByPartition = 0
    ByTime = 1
    ByArea = 2


class SelfPurifyingCfgType(betterproto.Enum):
    STANDARD = 0
    STRONG = 1
    ENERGY_SAVING = 2
    CUSTOM = 3


class SelfPurifyingCfgConfigFrequencyMode(betterproto.Enum):
    BY_TASK = 0
    BY_TIME = 1


class SelfPurifyingCfgConfigIntensityLevel(betterproto.Enum):
    LOW = 0
    MEDIUM = 1
    HIGH = 2


class StationResponseWaterLevel(betterproto.Enum):
    EMPTY = 0
    VERY_LOW = 1
    LOW = 2
    MEDIUM = 3
    HIGH = 4


class StationResponseStationStatusState(betterproto.Enum):
    """基站工作状态"""

    IDLE = 0
    WASHING = 1
    DRYING = 2
    REMOVING_SCALE = 3


class UnistateLiveMapStateBit(betterproto.Enum):
    BASE = 0
    ROOM = 1
    KITCHEN = 2
    PET = 3


class WifiDataApFrequency(betterproto.Enum):
    FREQ_2_4G = 0
    FREQ_5G = 1


class WifiDataApConnectionResult(betterproto.Enum):
    OK = 0
    PASSWD_ERR = 1


class UpgradeStatusStatus(betterproto.Enum):
    IDLE = 0
    DOWNLOADING = 1
    DOWNLOAD_COMPLETE = 2
    DOWNLOAD_FAILED = 3
    INSTALLING = 4
    INSTALL_COMPLETE = 5
    INSTALL_FAILED = 6


class UpgradeStatusError(betterproto.Enum):
    NONE = 0
    NOT_IN_STATION = 1
    BATTERY_NOT_ENOUGH = 2
    MCU_INSTALL_FAILED = 3
    AP_INSTALL_FAILED = 4
    STATION_NOT_CONNECTED = 5
    STATION_INSTALL_FAILED = 6


class WorkStatusState(betterproto.Enum):
    STANDBY = 0
    SLEEP = 1
    FAULT = 2
    CHARGING = 3
    FAST_MAPPING = 4
    CLEANING = 5
    REMOTE_CTRL = 6
    GO_HOME = 7
    CRUISIING = 8


class WorkStatusModeValue(betterproto.Enum):
    AUTO = 0
    SELECT_ROOM = 1
    SELECT_ZONE = 2
    SPOT = 3
    FAST_MAPPING = 4
    GLOBAL_CRUISE = 5
    ZONES_CRUISE = 6
    POINT_CRUISE = 7
    SCENE = 8
    SMART_FOLLOW = 9


class WorkStatusChargingState(betterproto.Enum):
    DOING = 0
    DONE = 1
    ABNORMAL = 2


class WorkStatusUpgradingState(betterproto.Enum):
    DOING = 0
    DONE = 1


class WorkStatusMappingRunState(betterproto.Enum):
    DOING = 0
    PAUSED = 1


class WorkStatusMappingMode(betterproto.Enum):
    MAPPING = 0
    RELOCATING = 1


class WorkStatusCleaningRunState(betterproto.Enum):
    DOING = 0
    PAUSED = 1


class WorkStatusCleaningMode(betterproto.Enum):
    CLEANING = 0
    RELOCATING = 1
    GOTO_POS = 2
    POOP_CLEANING = 3


class WorkStatusGoWashRunState(betterproto.Enum):
    DOING = 0
    PAUSED = 1


class WorkStatusGoWashMode(betterproto.Enum):
    NAVIGATION = 0
    WASHING = 1
    DRYING = 2


class WorkStatusGoHomeRunState(betterproto.Enum):
    DOING = 0
    PAUSED = 1


class WorkStatusGoHomeMode(betterproto.Enum):
    COMPLETE_TASK = 0
    COLLECT_DUST = 1
    OTHRERS = 10


class WorkStatusCruisiingRunState(betterproto.Enum):
    DOING = 0
    PAUSED = 1


class WorkStatusCruisiingMode(betterproto.Enum):
    RELOCATING = 0
    CRUISIING = 1


class WorkStatusRelocatingState(betterproto.Enum):
    DOING = 0


class WorkStatusBreakpointState(betterproto.Enum):
    DOING = 0


class WorkStatusRollerBrushCleaningState(betterproto.Enum):
    DOING = 0


class WorkStatusSmartFollowState(betterproto.Enum):
    DOING = 0


class WorkStatusSmartFollowMode(betterproto.Enum):
    FOLLOWING = 0
    SEARCHING = 1


class WorkStatusStationWaterInjectionSystemState(betterproto.Enum):
    ADDING = 0
    EMPTYING = 1


class WorkStatusStationDustCollectionSystemState(betterproto.Enum):
    EMPTYING = 0


class WorkStatusStationWashingDryingSystemState(betterproto.Enum):
    WASHING = 0
    DRYING = 1


class WorkStatusSceneTaskMode(betterproto.Enum):
    AUTO = 0
    SELECT_ROOM = 1
    SELECT_ZONE = 2


class WorkStatusTriggerSource(betterproto.Enum):
    UNKNOWN = 0
    APP = 1
    KEY = 2
    TIMING = 3
    ROBOT = 4
    REMOTE_CTRL = 5


@dataclass(eq=False, repr=False)
class AnalysisRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AnalysisInternalStatus(betterproto.Message):
    robotapp_state: str = betterproto.string_field(1)
    motion_state: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AnalysisStatistics(betterproto.Message):
    clean: "AnalysisStatisticsCleanRecord" = betterproto.message_field(1)
    gohome: "AnalysisStatisticsGoHomeRecord" = betterproto.message_field(2)
    relocate: "AnalysisStatisticsRelocateRecord" = betterproto.message_field(3)
    collect: "AnalysisStatisticsCollectRecord" = betterproto.message_field(4)
    ctrl_event: "AnalysisStatisticsControlEvent" = betterproto.message_field(5)
    distribute_event: "AnalysisStatisticsDistributeEvent" = betterproto.message_field(6)
    battery_info: "AnalysisStatisticsBatteryInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class AnalysisStatisticsCleanRecord(betterproto.Message):
    """清洁记录，清洁结束(包括自动结束和人工干预结束)上报."""

    clean_id: int = betterproto.uint32_field(1)
    result: bool = betterproto.bool_field(2)
    fail_code: "AnalysisStatisticsCleanRecordFailCode" = betterproto.enum_field(3)
    mode: "AnalysisStatisticsCleanRecordMode" = betterproto.enum_field(4)
    type: "AnalysisStatisticsCleanRecordType" = betterproto.enum_field(5)
    start_time: int = betterproto.uint64_field(6)
    end_time: int = betterproto.uint64_field(7)
    clean_time: int = betterproto.uint32_field(8)
    clean_area: int = betterproto.uint32_field(9)
    slam_area: int = betterproto.uint32_field(10)
    map_id: int = betterproto.uint32_field(11)
    room_count: int = betterproto.uint32_field(12)
    roll_brush: "AnalysisStatisticsCleanRecordRollBrush" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class AnalysisStatisticsCleanRecordRollBrush(betterproto.Message):
    protect_count: int = betterproto.uint32_field(1)
    """
    单次清扫地毯过流次数，特指机器为了在长毛地毯上能正常清扫(没有卡住异物)，采取的保护电机策略，
     例如 L60 长毛地毯电流在 800mA-1100mA之间采取开1s停2s策略.
    """

    stalled_count: int = betterproto.uint32_field(2)
    """单次清扫堵转过流次数，堵转后机器采取类似开1s停3s策略."""


@dataclass(eq=False, repr=False)
class AnalysisStatisticsGoHomeRecord(betterproto.Message):
    """回充记录，回充上座完成或回充失败时上报"""

    clean_id: int = betterproto.uint32_field(1)
    result: bool = betterproto.bool_field(2)
    fail_code: "AnalysisStatisticsGoHomeRecordFailCode" = betterproto.enum_field(3)
    power_level: int = betterproto.uint64_field(4)
    start_time: int = betterproto.uint64_field(5)
    end_time: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class AnalysisStatisticsRelocateRecord(betterproto.Message):
    """重定位记录，重定位成功或失败时上报"""

    clean_id: int = betterproto.uint32_field(1)
    result: bool = betterproto.bool_field(2)
    map_count: int = betterproto.uint32_field(3)
    start_time: int = betterproto.uint64_field(4)
    end_time: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class AnalysisStatisticsCollectRecord(betterproto.Message):
    """集尘记录，集尘完成或失败时上报"""

    clean_id: int = betterproto.uint32_field(1)
    result: bool = betterproto.bool_field(2)
    start_time: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class AnalysisStatisticsControlEvent(betterproto.Message):
    """控制事件"""

    clean_id: int = betterproto.uint32_field(1)
    type: "AnalysisStatisticsControlEventType" = betterproto.enum_field(2)
    source: "AnalysisStatisticsControlEventSource" = betterproto.enum_field(3)
    timestamp: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class AnalysisStatisticsDistributeEvent(betterproto.Message):
    """配网事件"""

    timestamp: "AnalysisStatisticsDistributeEventTimeStamp" = betterproto.message_field(
        1
    )
    mode: "AnalysisStatisticsDistributeEventMode" = betterproto.enum_field(2)
    result: "AnalysisStatisticsDistributeEventResult" = betterproto.enum_field(3)
    software_version: str = betterproto.string_field(4)
    sn: str = betterproto.string_field(7)
    mac: str = betterproto.string_field(5)
    uuid: str = betterproto.string_field(6)
    country_code: str = betterproto.string_field(8)
    token: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class AnalysisStatisticsDistributeEventTimeStamp(betterproto.Message):
    value: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class AnalysisStatisticsBatteryInfo(betterproto.Message):
    """电池信息"""

    update_time: int = betterproto.uint64_field(1)
    show_level: int = betterproto.uint32_field(2)
    real_level: int = betterproto.uint32_field(3)
    voltage: int = betterproto.uint32_field(4)
    current: int = betterproto.sint32_field(5)
    temperature: List[int] = betterproto.sint32_field(6)


@dataclass(eq=False, repr=False)
class AnalysisResponse(betterproto.Message):
    internal_status: "AnalysisInternalStatus" = betterproto.message_field(1)
    """机器人内部状态信息，不做缓存，变化比较频繁时将只上传最后的状态"""

    statistics: "AnalysisStatistics" = betterproto.message_field(2)
    """数据分析信息，做缓存，保证数据不丢失"""


@dataclass(eq=False, repr=False)
class ProtoInfo(betterproto.Message):
    """设备支持的协议"""

    global_verison: int = betterproto.uint32_field(1)
    collect_dust: "ProtoInfoModule" = betterproto.message_field(2)
    """
    *
     对应 station.proto 文件
     version 1 使用 CollectDustCfg
     version 2 使用 CollectDustCfgV2, option定义见CollectDustOptionBit
    """

    map_format: "ProtoInfoModule" = betterproto.message_field(3)
    """
    *
     version 1 地图增加 angle 字段（仅使用 Module.version）
     version 2 地图使用 option 定义见 MapFormatOptionBit
    """

    continue_clean: "ProtoInfoModule" = betterproto.message_field(4)
    """
    *
     version 1 断点续扫使用 option 定义见 ContinueCleanOptionBit
    """

    cut_hair: "ProtoInfoModule" = betterproto.message_field(5)
    """
    *
     version 1 支持割毛发功能
    """

    timing: "ProtoInfoModule" = betterproto.message_field(6)
    """
    *
     version 1 定时功能使用 option 定义见 TimingOptionBit
    """


@dataclass(eq=False, repr=False)
class ProtoInfoModule(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    options: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AppFunction(betterproto.Message):
    """App 支持的功能"""

    multi_maps: "AppFunctionModule" = betterproto.message_field(2)
    """
    *
     version 1 使用 option 定义见 MultiMapsFunctionBit
    """

    optimization: "AppFunctionModule" = betterproto.message_field(3)
    """
    *
     version 1 使用 option 定义见 OptimizationFunctionBit
    """


@dataclass(eq=False, repr=False)
class AppFunctionModule(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    options: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AppInfo(betterproto.Message):
    """
    手机 app 每次进入实时地图控制面板后有且仅下发一次
     手机 app 主用户和分享用户都需要发送这个消息，其中 user_id 必须填主用户的
    """

    platform: "AppInfoPlatform" = betterproto.enum_field(1)
    app_version: str = betterproto.string_field(2)
    family_id: str = betterproto.string_field(3)
    user_id: str = betterproto.string_field(4)
    data_center: "AppInfoDataCenter" = betterproto.enum_field(5)
    app_function: "AppFunction" = betterproto.message_field(6)
    time_zone_id: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class DeviceInfo(betterproto.Message):
    """机器上线时上报一次或者 ip、user_id 变更上报"""

    product_name: str = betterproto.string_field(1)
    video_sn: str = betterproto.string_field(2)
    device_mac: str = betterproto.string_field(3)
    software: str = betterproto.string_field(4)
    hardware: int = betterproto.uint32_field(5)
    wifi_name: str = betterproto.string_field(6)
    wifi_ip: str = betterproto.string_field(7)
    last_user_id: str = betterproto.string_field(8)
    station: "DeviceInfoStation" = betterproto.message_field(11)
    proto_info: "ProtoInfo" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class DeviceInfoStation(betterproto.Message):
    software: str = betterproto.string_field(1)
    hardware: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BtAppMsg(betterproto.Message):
    """手机 app 发给机器人"""

    get_product_info: "BtAppMsgGetProductInfo" = betterproto.message_field(1)
    get_ap_list: "BtAppMsgGetApList" = betterproto.message_field(2)
    distribute: "BtAppMsgDistribute" = betterproto.message_field(3)
    req: "BtAppMsgDebug" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BtAppMsgGetProductInfo(betterproto.Message):
    get: bool = betterproto.bool_field(1)
    distribute_version: int = betterproto.uint32_field(2)
    """
    手机端配网功能的版本
     设备根据获取的版本使用不同的配网方法
     目前：版本=0 蓝牙配网不加密
           版本=1 蓝牙配网的 ssid、passwd 使用 AesCbc128 加密
    """

    remedy_field: "BtAppMsgGetProductInfoRemedyField" = betterproto.message_field(3)
    country: "BtAppMsgGetProductInfoCountry" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class BtAppMsgGetProductInfoRemedyField(betterproto.Message):
    distribute_version2: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BtAppMsgGetProductInfoCountry(betterproto.Message):
    """WiFi 合规需要country code，如 CN、US、JP"""

    code: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class BtAppMsgGetApList(betterproto.Message):
    max_num: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BtAppMsgDistribute(betterproto.Message):
    ssid: str = betterproto.string_field(1)
    passwd: str = betterproto.string_field(2)
    token: str = betterproto.string_field(3)
    user_id: str = betterproto.string_field(4)
    time_zone_id: str = betterproto.string_field(5)
    domain: str = betterproto.string_field(6)
    app_id: str = betterproto.string_field(7)
    house_id: str = betterproto.string_field(8)
    dev_name: str = betterproto.string_field(9)
    hub_name: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class BtAppMsgDebug(betterproto.Message):
    d_data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class BtRobotMsg(betterproto.Message):
    """机器人发给手机 App"""

    product_info: "BtRobotMsgProductInfo" = betterproto.message_field(1)
    ap_list: "BtRobotMsgApList" = betterproto.message_field(2)
    distribute_result: "BtRobotMsgDistributeResult" = betterproto.message_field(3)
    ack: "BtRobotMsgDebug" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BtRobotMsgProductInfo(betterproto.Message):
    ret: "BtRobotMsgProductInfoResult" = betterproto.enum_field(1)
    brand: str = betterproto.string_field(2)
    code_name: str = betterproto.string_field(3)
    model: str = betterproto.string_field(4)
    name: str = betterproto.string_field(5)
    alisa_name: str = betterproto.string_field(6)
    cloud_pid: str = betterproto.string_field(7)
    mac: str = betterproto.string_field(8)
    distribute_version: int = betterproto.uint32_field(10)
    """
    机器端配网功能的版本
     手机 app 根据获取的版本使用不同的配网方法
     目前：版本=0 蓝牙配网不加密
           版本=1 蓝牙配网的 ssid、passwd 使用 AesCbc128 加密
    """

    remedy_field: "BtRobotMsgProductInfoRemedyField" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class BtRobotMsgProductInfoRemedyField(betterproto.Message):
    distribute_version2: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BtRobotMsgApList(betterproto.Message):
    ap_info: List["BtRobotMsgApListApInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BtRobotMsgApListApInfo(betterproto.Message):
    ssid: str = betterproto.string_field(1)
    dbm: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class BtRobotMsgDistributeResult(betterproto.Message):
    value: "BtRobotMsgDistributeResultValue" = betterproto.enum_field(1)
    mac: str = betterproto.string_field(2)
    pid: str = betterproto.string_field(3)
    uuid: str = betterproto.string_field(4)
    authkey: str = betterproto.string_field(5)
    dbm: int = betterproto.int32_field(6)
    aiot_result: "BtRobotMsgDistributeResultAiotResult" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class BtRobotMsgDistributeResultAiotResult(betterproto.Message):
    get_mqtt_info_ret: int = betterproto.int32_field(1)
    get_data_point_ret: int = betterproto.int32_field(2)
    connect_mqtt_ret: int = betterproto.int32_field(3)
    bind_ret: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class BtRobotMsgDebug(betterproto.Message):
    d_data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Empty(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Point(betterproto.Message):
    x: int = betterproto.sint32_field(1)
    y: int = betterproto.sint32_field(2)


@dataclass(eq=False, repr=False)
class Pose(betterproto.Message):
    x: int = betterproto.sint32_field(1)
    y: int = betterproto.sint32_field(2)
    theta: int = betterproto.sint32_field(3)


@dataclass(eq=False, repr=False)
class Line(betterproto.Message):
    p0: "Point" = betterproto.message_field(1)
    p1: "Point" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Quadrangle(betterproto.Message):
    p0: "Point" = betterproto.message_field(1)
    p1: "Point" = betterproto.message_field(2)
    p2: "Point" = betterproto.message_field(3)
    p3: "Point" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class Polygon(betterproto.Message):
    points: List["Point"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Switch(betterproto.Message):
    value: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class Active(betterproto.Message):
    value: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class Numerical(betterproto.Message):
    value: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class Floor(betterproto.Message):
    """地面类型"""

    type: "FloorType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class RoomScene(betterproto.Message):
    """
    房间类型
     当房间未命名时，手机 app 根据类型和索引值自动多语言命名，如 "厨房1"、"Kitchen1" 等
    """

    type: "RoomSceneType" = betterproto.enum_field(1)
    index: "RoomSceneIndex" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RoomSceneIndex(betterproto.Message):
    value: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class Fan(betterproto.Message):
    suction: "FanSuction" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class MopMode(betterproto.Message):
    level: "MopModeLevel" = betterproto.enum_field(1)
    corner_clean: "MopModeCornerClean" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CleanCarpet(betterproto.Message):
    strategy: "CleanCarpetStrategy" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CleanType(betterproto.Message):
    value: "CleanTypeValue" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CleanExtent(betterproto.Message):
    value: "CleanExtentValue" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CleanTimes(betterproto.Message):
    auto_clean: int = betterproto.uint32_field(1)
    select_rooms: int = betterproto.uint32_field(2)
    spot_clean: int = betterproto.uint32_field(4)
    """id 3 已不再使用"""


@dataclass(eq=False, repr=False)
class CleanParam(betterproto.Message):
    """吸力档位 Fan 来自单独的 dp，不放在 CleanParam"""

    clean_type: "CleanType" = betterproto.message_field(1)
    clean_carpet: "CleanCarpet" = betterproto.message_field(2)
    clean_extent: "CleanExtent" = betterproto.message_field(3)
    mop_mode: "MopMode" = betterproto.message_field(4)
    smart_mode_sw: "Switch" = betterproto.message_field(5)
    fan: "Fan" = betterproto.message_field(6)
    clean_times: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CleanParamRequest(betterproto.Message):
    clean_param: "CleanParam" = betterproto.message_field(1)
    area_clean_param: "CleanParam" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CleanParamResponse(betterproto.Message):
    """清洁参数，需要保存"""

    clean_param: "CleanParam" = betterproto.message_field(1)
    clean_times: "CleanTimes" = betterproto.message_field(2)
    area_clean_param: "CleanParam" = betterproto.message_field(3)
    running_clean_param: "CleanParam" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RemoteCtrl(betterproto.Message):
    """遥控器方向"""

    direction: "RemoteCtrlDirection" = betterproto.enum_field(1)
    """App下发任意FORWARD/BACK/LEFT/RIGHT即进入遥控模式"""


@dataclass(eq=False, repr=False)
class AutoClean(betterproto.Message):
    """
    通用全局清扫，清洁参数走 clean_param 中 clean_param 参数
     定制全局清扫，设置每个房间不同的清扫参数走 stream 定制参数 - x10 开始不受支持
     通过 MapEditRequest.RoomsCustom.custom_enable 判断使用哪种参数 - x10 开始不受支持
    """

    clean_times: int = betterproto.uint32_field(1)
    """总清扫次数"""

    force_mapping: bool = betterproto.bool_field(2)
    """强制建图（即使当前有图也会重新建图）"""


@dataclass(eq=False, repr=False)
class SelectRoomsClean(betterproto.Message):
    """
    通用房间清扫，清洁参数走 clean_param 中 area_clean_param 参数
     定制房间清扫，设置每个房间不同的清扫参数走 stream 定制参数（通过 MapEditRequest.RoomsCustom 设置）
     通过 type 判断使用哪种参数
    """

    rooms: List["SelectRoomsCleanRoom"] = betterproto.message_field(1)
    clean_times: int = betterproto.uint32_field(2)
    map_id: int = betterproto.uint32_field(3)
    releases: int = betterproto.uint32_field(4)
    mode: "SelectRoomsCleanMode" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class SelectRoomsCleanRoom(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    order: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SelectZonesClean(betterproto.Message):
    zones: List["SelectZonesCleanZone"] = betterproto.message_field(1)
    map_id: int = betterproto.uint32_field(2)
    releases: int = betterproto.uint32_field(3)
    type: "SelectZonesCleanType" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class SelectZonesCleanZone(betterproto.Message):
    quadrangle: "Quadrangle" = betterproto.message_field(1)
    clean_times: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneClean(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SpotClean(betterproto.Message):
    clean_times: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class Goto(betterproto.Message):
    destination: "Point" = betterproto.message_field(1)
    type: "GotoType" = betterproto.enum_field(2)
    clean_times: int = betterproto.uint32_field(3)
    map_id: int = betterproto.uint32_field(4)
    releases: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ScheduleAutoClean(betterproto.Message):
    fan: "Fan" = betterproto.message_field(1)
    mop_mode: "MopMode" = betterproto.message_field(2)
    clean_type: "CleanType" = betterproto.message_field(3)
    clean_extent: "CleanExtent" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ScheduleRoomsClean(betterproto.Message):
    fan: "Fan" = betterproto.message_field(1)
    mop_mode: "MopMode" = betterproto.message_field(2)
    clean_type: "CleanType" = betterproto.message_field(3)
    clean_extent: "CleanExtent" = betterproto.message_field(4)
    rooms: List["ScheduleRoomsCleanRoom"] = betterproto.message_field(5)
    map_id: int = betterproto.uint32_field(6)
    releases: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ScheduleRoomsCleanRoom(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    order: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GlobalCruise(betterproto.Message):
    """用户设置的全局巡航点通过地图编辑下发"""

    map_id: int = betterproto.uint32_field(1)
    releases: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PointCruise(betterproto.Message):
    points: "Point" = betterproto.message_field(1)
    map_id: int = betterproto.uint32_field(2)
    releases: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ZonesCruise(betterproto.Message):
    points: List["Point"] = betterproto.message_field(1)
    map_id: int = betterproto.uint32_field(2)
    releases: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ScheduleCruise(betterproto.Message):
    map_id: int = betterproto.uint32_field(1)
    releases: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ModeCtrlRequest(betterproto.Message):
    method: "ModeCtrlRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    auto_clean: "AutoClean" = betterproto.message_field(3, group="Param")
    select_rooms_clean: "SelectRoomsClean" = betterproto.message_field(4, group="Param")
    select_zones_clean: "SelectZonesClean" = betterproto.message_field(5, group="Param")
    spot_clean: "SpotClean" = betterproto.message_field(6, group="Param")
    go_to: "Goto" = betterproto.message_field(7, group="Param")
    sche_auto_clean: "ScheduleAutoClean" = betterproto.message_field(8, group="Param")
    sche_rooms_clean: "ScheduleRoomsClean" = betterproto.message_field(9, group="Param")
    global_cruise: "GlobalCruise" = betterproto.message_field(10, group="Param")
    point_cruise: "PointCruise" = betterproto.message_field(11, group="Param")
    zones_cruise: "ZonesCruise" = betterproto.message_field(12, group="Param")
    sche_cruise: "ScheduleCruise" = betterproto.message_field(13, group="Param")
    scene_clean: "SceneClean" = betterproto.message_field(14, group="Param")


@dataclass(eq=False, repr=False)
class ModeCtrlResponse(betterproto.Message):
    """TODO: 可以考虑不返回，执行成功后状态会相应改变."""

    method: "ModeCtrlRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    result: "ModeCtrlResponseResult" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class TimerInfo(betterproto.Message):
    id: "TimerInfoId" = betterproto.message_field(1)
    status: "TimerInfoStatus" = betterproto.message_field(2)
    desc: "TimerInfoDesc" = betterproto.message_field(3)
    addition: "TimerInfoAddition" = betterproto.message_field(4)
    action: "TimerInfoAction" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class TimerInfoId(betterproto.Message):
    """
    手机 app 新建定时不需要该字段，设备返回 id
     手机 app 其他操作需要该字段
    """

    value: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TimerInfoStatus(betterproto.Message):
    valid: bool = betterproto.bool_field(1)
    opened: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class TimerInfoDesc(betterproto.Message):
    trigger: "TimerInfoDescTrigger" = betterproto.enum_field(1)
    timing: "TimerInfoDescTiming" = betterproto.message_field(2)
    cycle: "TimerInfoDescCycle" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TimerInfoDescTiming(betterproto.Message):
    user_tz: int = betterproto.uint32_field(1)
    summer: bool = betterproto.bool_field(2)
    hours: int = betterproto.uint32_field(3)
    minutes: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TimerInfoDescCycle(betterproto.Message):
    """
    周期触发需要有以下字段描述周期
     这里的 week 指用户感知的周，机器需要结合用户时区来判断某天对应的时间
    """

    week_bits: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TimerInfoAddition(betterproto.Message):
    create_time: int = betterproto.uint64_field(1)
    create_user_id: str = betterproto.string_field(2)
    renew_time: int = betterproto.uint64_field(3)
    renew_user_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class TimerInfoAction(betterproto.Message):
    type: "TimerInfoActionType" = betterproto.enum_field(1)
    precondition: "TimerInfoActionPrecondition" = betterproto.message_field(2)
    sche_auto_clean: "TimerInfoActionScheduleAutoClean" = betterproto.message_field(
        3, group="Param"
    )
    sche_rooms_clean: "TimerInfoActionScheduleRoomsClean" = betterproto.message_field(
        4, group="Param"
    )
    sche_cruise: "TimerInfoActionScheduleCruise" = betterproto.message_field(
        5, group="Param"
    )
    sche_scene_clean: "TimerInfoActionScheduleSceneClean" = betterproto.message_field(
        6, group="Param"
    )


@dataclass(eq=False, repr=False)
class TimerInfoActionPrecondition(betterproto.Message):
    """前置操作"""

    pass


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleAutoClean(betterproto.Message):
    mode: "TimerInfoActionMode" = betterproto.enum_field(1)
    general: "TimerInfoActionScheduleAutoCleanGeneral" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleAutoCleanGeneral(betterproto.Message):
    fan: "Fan" = betterproto.message_field(1)
    """智能省心模式开关关闭时才有下面 4 个字段"""

    mop_mode: "MopMode" = betterproto.message_field(2)
    clean_type: "CleanType" = betterproto.message_field(3)
    clean_extent: "CleanExtent" = betterproto.message_field(4)
    smart_mode_sw: "Switch" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleRoomsClean(betterproto.Message):
    mode: "TimerInfoActionMode" = betterproto.enum_field(1)
    general: "TimerInfoActionScheduleRoomsCleanGeneral" = betterproto.message_field(2)
    custom: "TimerInfoActionScheduleRoomsCleanCustom" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleRoomsCleanGeneral(betterproto.Message):
    map_id: int = betterproto.uint32_field(1)
    fan: "Fan" = betterproto.message_field(2)
    mop_mode: "MopMode" = betterproto.message_field(3)
    clean_type: "CleanType" = betterproto.message_field(4)
    clean_extent: "CleanExtent" = betterproto.message_field(5)
    rooms: List["TimerInfoActionScheduleRoomsCleanGeneralRoom"] = (
        betterproto.message_field(6)
    )


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleRoomsCleanGeneralRoom(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    order: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleRoomsCleanCustom(betterproto.Message):
    map_id: int = betterproto.uint32_field(1)
    smart_mode_sw: "Switch" = betterproto.message_field(2)
    rooms: List["TimerInfoActionScheduleRoomsCleanCustomRoom"] = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleRoomsCleanCustomRoom(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    order: int = betterproto.uint32_field(2)
    clean_type: "CleanType" = betterproto.message_field(6)
    """智能省心模式开关关闭时才有下面 4 个字段"""

    fan: "Fan" = betterproto.message_field(7)
    mop_mode: "MopMode" = betterproto.message_field(8)
    clean_extent: "CleanExtent" = betterproto.message_field(9)
    clean_times: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleCruise(betterproto.Message):
    map_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TimerInfoActionScheduleSceneClean(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    scene_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TimerRequest(betterproto.Message):
    method: "TimerRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    timer: "TimerInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TimerResponse(betterproto.Message):
    method: "TimerRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    result: "TimerResponseResult" = betterproto.message_field(3)
    timers: List["TimerInfo"] = betterproto.message_field(4)
    """全量上报机器中所有的定时信息"""


@dataclass(eq=False, repr=False)
class TimerResponseResult(betterproto.Message):
    value: "TimerResponseResultValue" = betterproto.enum_field(1)
    err_code: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneTask(betterproto.Message):
    index: int = betterproto.uint32_field(1)
    type: "SceneTaskType" = betterproto.enum_field(2)
    current_room: "SceneTaskCurrentRoom" = betterproto.message_field(3, group="Task")
    all_rooms: "SceneTaskAllRooms" = betterproto.message_field(4, group="Task")


@dataclass(eq=False, repr=False)
class SceneTaskGeneral(betterproto.Message):
    """通用参数"""

    clean_type: "CleanType" = betterproto.message_field(1)
    clean_times: int = betterproto.uint32_field(2)
    fan: "Fan" = betterproto.message_field(3)
    mop_mode: "MopMode" = betterproto.message_field(4)
    clean_extent: "CleanExtent" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SceneTaskCurrentRoom(betterproto.Message):
    mode: "SceneTaskCleanMode" = betterproto.enum_field(1)
    units: List["SceneTaskCurrentRoomUnit"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneTaskCurrentRoomUnit(betterproto.Message):
    general: "SceneTaskGeneral" = betterproto.message_field(1)
    room_clean: "SceneTaskCurrentRoomUnitRoomClean" = betterproto.message_field(
        2, group="Param"
    )
    zone_clean: "SceneTaskCurrentRoomUnitZoneClean" = betterproto.message_field(
        3, group="Param"
    )


@dataclass(eq=False, repr=False)
class SceneTaskCurrentRoomUnitRoomClean(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)
    room_scene: "RoomScene" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneTaskCurrentRoomUnitZoneClean(betterproto.Message):
    quadrangle: "Quadrangle" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SceneTaskAllRooms(betterproto.Message):
    mode: "SceneTaskCleanMode" = betterproto.enum_field(1)
    general: "SceneTaskGeneral" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneInfo(betterproto.Message):
    id: "SceneInfoId" = betterproto.message_field(1)
    valid: bool = betterproto.bool_field(2)
    invalid_reason: "SceneInfoInvalidReason" = betterproto.enum_field(3)
    name: str = betterproto.string_field(4)
    mapid: int = betterproto.uint32_field(5)
    estimate_time: int = betterproto.uint32_field(6)
    """场景执行时的动态时间数据放 WorkStatus 中"""

    index: int = betterproto.uint32_field(7)
    type: "SceneInfoType" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class SceneInfoId(betterproto.Message):
    """
    手机 app 新建定时不需要该字段，设备返回 id
     手机 app 其他操作需要该字段
    """

    value: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneRequest(betterproto.Message):
    method: "SceneRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    common: "SceneRequestCommon" = betterproto.message_field(3, group="Param")
    scene: "SceneRequestScene" = betterproto.message_field(4, group="Param")


@dataclass(eq=False, repr=False)
class SceneRequestCommon(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneRequestScene(betterproto.Message):
    info: "SceneInfo" = betterproto.message_field(1)
    tasks: List["SceneTask"] = betterproto.message_field(2)
    desc: "TimerInfoDesc" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SceneResponse(betterproto.Message):
    """通过 dp 传基础信息"""

    method: "SceneRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    result: "SceneResponseResult" = betterproto.message_field(3)
    infos: List["SceneInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SceneResponseResult(betterproto.Message):
    value: "SceneResponseResultValue" = betterproto.enum_field(1)
    err_code: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CleanRecordDesc(betterproto.Message):
    start_time: int = betterproto.uint64_field(1)
    end_time: int = betterproto.uint64_field(2)
    duration: int = betterproto.uint32_field(3)
    area: int = betterproto.uint32_field(4)
    clean_type: "CleanType" = betterproto.message_field(5)
    finish_reason: "CleanRecordDescFinishReason" = betterproto.enum_field(6)
    extra: "CleanRecordDescExtra" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CleanRecordDescExtra(betterproto.Message):
    mode: "CleanRecordDescExtraMode" = betterproto.enum_field(1)
    mus: int = betterproto.uint32_field(2)
    """
    MUS 功能（根据项目定义进行选配）
        bit-0: 执行过洗拖布
        bit-1: 执行过烘干拖布
        bit-2: 执行过集尘
        bit-3: 执行过滚刷自清洁
    """

    error_code: int = betterproto.uint32_field(3)
    """
    清扫错误码，正常为 0
     值来自 error_code_list_xxx.proto
    """

    prompt_code: int = betterproto.uint32_field(4)
    """
    清扫警告码，正常为 0
     值来自 error_code_list_xxx.proto
    """


@dataclass(eq=False, repr=False)
class CleanRecordData(betterproto.Message):
    restricted_zone: "stream.RestrictedZone" = betterproto.message_field(1)
    temp_data: "stream.TemporaryData" = betterproto.message_field(2)
    room_params: "stream.RoomParams" = betterproto.message_field(3)
    path_data: bytes = betterproto.bytes_field(6)
    """
    上传格式： 头部 Point Point Point Point ...  Point
               其中头部格式： 0xAA 0x03 [4字节 map_id] [4字节 releases]
    """

    map: "stream.Map" = betterproto.message_field(10)
    room_outline: "stream.RoomOutline" = betterproto.message_field(11)
    obstacle_info: "stream.ObstacleInfo" = betterproto.message_field(12)
    path_data_v2: "CleanRecordDataPathData" = betterproto.message_field(13)
    map_p2_p: "p2p.CompleteMap" = betterproto.message_field(20)
    """p2p通道 清扫记录使用以下参数，不使用上述参数"""

    path_p2_p: "p2p.CompletePath" = betterproto.message_field(21)


@dataclass(eq=False, repr=False)
class CleanRecordDataPathData(betterproto.Message):
    points: List["stream.PathPoint"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CruiseRecordDesc(betterproto.Message):
    start_time: int = betterproto.uint64_field(1)
    end_time: int = betterproto.uint64_field(2)
    duration: int = betterproto.uint32_field(3)
    finish_reason: "CruiseRecordDescFinishReason" = betterproto.enum_field(4)
    extra: "CruiseRecordDescExtra" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CruiseRecordDescExtra(betterproto.Message):
    mode: "CruiseRecordDescExtraMode" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CruiseRecordData(betterproto.Message):
    restricted_zone: "stream.RestrictedZone" = betterproto.message_field(1)
    temp_data: "stream.TemporaryData" = betterproto.message_field(2)
    room_params: "stream.RoomParams" = betterproto.message_field(3)
    obstacle_info: "stream.ObstacleInfo" = betterproto.message_field(4)
    path_data: bytes = betterproto.bytes_field(5)
    """
    上传格式： 头部 Point Point Point Point ...  Point
               其中头部格式： 0xAA 0x03 [4字节 map_id] [4字节 releases]
    """

    cruise_data: "stream.CruiseData" = betterproto.message_field(6)
    map: "stream.Map" = betterproto.message_field(7)
    room_outline: "stream.RoomOutline" = betterproto.message_field(8)
    map_p2_p: "p2p.CompleteMap" = betterproto.message_field(20)
    """p2p通道 使用以下参数，不使用 除 cruise_data 以外的上述参数"""

    path_p2_p: "p2p.CompletePath" = betterproto.message_field(21)


@dataclass(eq=False, repr=False)
class CleanRecordWrap(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    desc: bytes = betterproto.bytes_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CleanStatistics(betterproto.Message):
    single: "CleanStatisticsSingle" = betterproto.message_field(1)
    total: "CleanStatisticsTotal" = betterproto.message_field(2)
    user_total: "CleanStatisticsTotal" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CleanStatisticsSingle(betterproto.Message):
    clean_duration: int = betterproto.uint32_field(1)
    clean_area: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CleanStatisticsTotal(betterproto.Message):
    clean_duration: int = betterproto.uint32_field(1)
    clean_area: int = betterproto.uint32_field(2)
    clean_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ConsumableRequest(betterproto.Message):
    reset_types: List["ConsumableRequestType"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class ConsumableRuntime(betterproto.Message):
    side_brush: "ConsumableRuntimeDuration" = betterproto.message_field(1)
    rolling_brush: "ConsumableRuntimeDuration" = betterproto.message_field(2)
    filter_mesh: "ConsumableRuntimeDuration" = betterproto.message_field(3)
    scrape: "ConsumableRuntimeDuration" = betterproto.message_field(4)
    sensor: "ConsumableRuntimeDuration" = betterproto.message_field(5)
    mop: "ConsumableRuntimeDuration" = betterproto.message_field(6)
    dustbag: "ConsumableRuntimeDuration" = betterproto.message_field(7)
    dirty_watertank: "ConsumableRuntimeDuration" = betterproto.message_field(10)
    dirty_waterfilter: "ConsumableRuntimeDuration" = betterproto.message_field(11)
    last_time: int = betterproto.uint64_field(20)


@dataclass(eq=False, repr=False)
class ConsumableRuntimeDuration(betterproto.Message):
    duration: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ConsumableResponse(betterproto.Message):
    runtime: "ConsumableRuntime" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DebugRequest(betterproto.Message):
    log_sw: "Switch" = betterproto.message_field(1)
    fault_report: "DebugRequestFaultReport" = betterproto.message_field(2)
    capture_sw: "Switch" = betterproto.message_field(3)
    image_feedback: "DebugRequestImageFeedback" = betterproto.message_field(4)
    toggle_mop_raise: "Switch" = betterproto.message_field(11)
    toggle_mop_spin: "Switch" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class DebugRequestFaultReport(betterproto.Message):
    """用户在手机 app 主动反馈异常，这时设备可以单次上传日志"""

    seq: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DebugRequestImageFeedback(betterproto.Message):
    """图像识别不准确时，用户可以在手机 app 上主动反馈"""

    object_type: str = betterproto.string_field(1)
    photo_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DebugResponse(betterproto.Message):
    log_sw: "Switch" = betterproto.message_field(1)
    update_info: "DebugResponseUpdateInfo" = betterproto.message_field(2)
    webtty_info: "DebugResponseWebTtyInfo" = betterproto.message_field(3)
    capture_sw: "Switch" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class DebugResponseUpdateInfo(betterproto.Message):
    err_code: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DebugResponseWebTtyInfo(betterproto.Message):
    connection_data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ErrorSetting(betterproto.Message):
    """云端下发给机器"""

    warn_mask: List[int] = betterproto.uint32_field(1)
    obstacle_reminder_mask: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ErrorCode(betterproto.Message):
    """机器上报到云的错误警告码，包含云端下发的 mask 字段（二次触发需要清除相应的项），枚举来自 ErrorCodeList"""

    last_time: int = betterproto.uint64_field(1)
    error: List[int] = betterproto.uint32_field(2)
    warn: List[int] = betterproto.uint32_field(3)
    setting: "ErrorSetting" = betterproto.message_field(4)
    new_code: "ErrorCodeNewCode" = betterproto.message_field(10)
    battery: "ErrorCodeBattery" = betterproto.message_field(11)
    obstacle_reminder: List["ErrorCodeObstacleReminder"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ErrorCodeNewCode(betterproto.Message):
    error: List[int] = betterproto.uint32_field(1)
    warn: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ErrorCodeBattery(betterproto.Message):
    restored: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ErrorCodeObstacleReminder(betterproto.Message):
    type: "ErrorCodeObstacleReminderType" = betterproto.enum_field(1)
    photo_id: str = betterproto.string_field(2)
    accuracy: int = betterproto.uint32_field(3)
    map_id: int = betterproto.uint32_field(4)
    point: "Point" = betterproto.message_field(5, group="Description")


@dataclass(eq=False, repr=False)
class PromptCode(betterproto.Message):
    """方向：机器上报到云的提醒（手机 app 显示 toast），枚举来自 PromptCodeList"""

    last_time: int = betterproto.uint64_field(1)
    value: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class KeepAliveRequest(betterproto.Message):
    timestamp: int = betterproto.uint64_field(1)
    force_sync: bool = betterproto.bool_field(2)
    """
    强制同步机器中数据
     手机 app 上多次尝试都拿不到数据才考虑使用该标志
    """


@dataclass(eq=False, repr=False)
class LanguageRequest(betterproto.Message):
    desc: "LanguageRequestDesc" = betterproto.message_field(1)
    selection: "LanguageRequestSelection" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LanguageRequestDesc(betterproto.Message):
    set_id: int = betterproto.uint32_field(1)
    url: str = betterproto.string_field(2)
    md5: str = betterproto.string_field(3)
    version: int = betterproto.uint32_field(4)
    size: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class LanguageRequestSelection(betterproto.Message):
    value: "LanguageRequestSelectionValue" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class LanguageResponse(betterproto.Message):
    default_id: int = betterproto.uint32_field(1)
    current_id: int = betterproto.uint32_field(2)
    version: int = betterproto.uint32_field(3)
    set_id: int = betterproto.uint32_field(4)
    state: "LanguageResponseState" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class MapEditRequest(betterproto.Message):
    method: "MapEditRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    map_id: int = betterproto.uint32_field(3)
    merge_rooms: "MapEditRequestMergeRooms" = betterproto.message_field(
        6, group="Param"
    )
    divide_room: "MapEditRequestDivideRoom" = betterproto.message_field(
        7, group="Param"
    )
    restricted_zone: "stream.RestrictedZone" = betterproto.message_field(
        8, group="Param"
    )
    room_desc: "MapEditRequestRoomDesc" = betterproto.message_field(9, group="Param")
    rooms_custom: "MapEditRequestRoomsCustom" = betterproto.message_field(
        10, group="Param"
    )
    cruise_points: "MapEditRequestCruisePoints" = betterproto.message_field(
        11, group="Param"
    )
    rotation: "MapEditRequestRotation" = betterproto.message_field(12, group="Param")
    ignore_obstacle: "MapEditRequestIgnoreObstacle" = betterproto.message_field(
        13, group="Param"
    )


@dataclass(eq=False, repr=False)
class MapEditRequestMergeRooms(betterproto.Message):
    room_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MapEditRequestDivideRoom(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)
    points: List["Point"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MapEditRequestRoomsCustom(betterproto.Message):
    """房间定制(个性化清洁)"""

    custom_enable: "MapEditRequestRoomsCustomEnable" = betterproto.message_field(1)
    rooms_order: "MapEditRequestRoomsCustomOrder" = betterproto.message_field(2)
    rooms_parm: "MapEditRequestRoomsCustomParm" = betterproto.message_field(3)
    smart_mode_sw: "Switch" = betterproto.message_field(4)
    condition: "MapEditRequestRoomsCustomCondition" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class MapEditRequestRoomsCustomEnable(betterproto.Message):
    value: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class MapEditRequestRoomsCustomOrder(betterproto.Message):
    """设置房间顺序"""

    rooms: List["MapEditRequestRoomsCustomOrderRoom"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MapEditRequestRoomsCustomOrderRoom(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    order: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MapEditRequestRoomsCustomParm(betterproto.Message):
    """设置房间定制参数"""

    rooms: List["MapEditRequestRoomsCustomParmRoom"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MapEditRequestRoomsCustomParmRoom(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    custom: "MapEditRequestRoomsCustomParmRoomCustom" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MapEditRequestRoomsCustomParmRoomCustom(betterproto.Message):
    clean_type: "CleanType" = betterproto.message_field(1)
    fan: "Fan" = betterproto.message_field(2)
    mop_mode: "MopMode" = betterproto.message_field(3)
    clean_extent: "CleanExtent" = betterproto.message_field(4)
    clean_times: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MapEditRequestRoomDesc(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    floor: "Floor" = betterproto.message_field(3)
    scene: "RoomScene" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MapEditRequestCruisePoints(betterproto.Message):
    points: List["Point"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MapEditRequestRotation(betterproto.Message):
    angle: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MapEditRequestIgnoreObstacle(betterproto.Message):
    valid: bool = betterproto.bool_field(1)
    object_type: str = betterproto.string_field(2)
    photo_id: str = betterproto.string_field(3)
    point: "Point" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MapEditResponse(betterproto.Message):
    method: "MapEditRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    result: "MapEditResponseResult" = betterproto.enum_field(3)
    fail_code: "MapEditResponseFailCode" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MapEditResponseFailCode(betterproto.Message):
    value: "MapEditResponseFailCodeValue" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class MapEntity(betterproto.Message):
    """
    *
     地图实体数据，包括
    - 地图描述；
    - 地图像素；
    """

    desc: "MapEntityDesc" = betterproto.message_field(1)
    pixel: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class MapEntityDesc(betterproto.Message):
    map_id: int = betterproto.uint32_field(1)
    width: int = betterproto.uint32_field(2)
    height: int = betterproto.uint32_field(3)
    resolution: int = betterproto.uint32_field(4)
    origin: "Point" = betterproto.message_field(5)
    docks: List["Pose"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class MapExtras(betterproto.Message):
    """
    *
     地图附加信息，包括
      - 地图名称；
      - 房间轮廓；
      - 房间参数；
      - 禁区；
    """

    name: str = betterproto.string_field(1)
    room_outline: List["stream.RoomOutline"] = betterproto.message_field(2)
    room_params: List["stream.RoomParams"] = betterproto.message_field(3)
    restricted_zone: "stream.RestrictedZone" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MediaSetting(betterproto.Message):
    rt_stream: "MediaSettingRtStream" = betterproto.message_field(1)
    record: "MediaSettingRecord" = betterproto.message_field(2)
    capture: "MediaSettingCapture" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MediaSettingRtStream(betterproto.Message):
    """实时视频流参数"""

    resolution: "MediaSettingResolution" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class MediaSettingRecord(betterproto.Message):
    """录像参数"""

    resolution: "MediaSettingResolution" = betterproto.enum_field(1)
    bitrate: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MediaSettingCapture(betterproto.Message):
    """拍照参数"""

    width: int = betterproto.uint32_field(1)
    height: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MediaStatus(betterproto.Message):
    state: "MediaStatusState" = betterproto.enum_field(1)
    storage: "MediaStatusStorage" = betterproto.enum_field(2)
    total_space: int = betterproto.uint32_field(3)
    photo_space: int = betterproto.uint32_field(4)
    video_space: int = betterproto.uint32_field(5)
    bind_state: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class MediaManagerRequest(betterproto.Message):
    control: "MediaManagerRequestControl" = betterproto.message_field(1)
    setting: "MediaSetting" = betterproto.message_field(2)
    bind_media_svc_data: "MediaManagerRequestBindMediaSvc" = betterproto.message_field(
        3
    )


@dataclass(eq=False, repr=False)
class MediaManagerRequestControl(betterproto.Message):
    """媒体控制"""

    method: "MediaManagerRequestControlMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MediaManagerRequestBindMediaSvc(betterproto.Message):
    seq: int = betterproto.uint32_field(1)
    c: int = betterproto.uint32_field(2)
    d: int = betterproto.uint32_field(3)
    g: str = betterproto.string_field(4)
    j: int = betterproto.uint32_field(5)
    user_account: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class MediaManagerResponse(betterproto.Message):
    control: "MediaManagerResponseControl" = betterproto.message_field(1)
    setting: "MediaSetting" = betterproto.message_field(2)
    status: "MediaStatus" = betterproto.message_field(3)
    bind_media_svc: "MediaManagerResponseBindMediaSvc" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MediaManagerResponseControl(betterproto.Message):
    """媒体控制结果"""

    method: "MediaManagerRequestControlMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    result: "MediaManagerResponseControlResult" = betterproto.enum_field(3)
    file_info: "MediaManagerResponseControlFileInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MediaManagerResponseControlFileInfo(betterproto.Message):
    filepath: str = betterproto.string_field(1)
    id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MediaManagerResponseBindMediaSvc(betterproto.Message):
    seq: int = betterproto.uint32_field(1)
    result: "MediaManagerResponseBindMediaSvcResult" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class Volume(betterproto.Message):
    value: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class Power(betterproto.Message):
    sw: "Switch" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Battery(betterproto.Message):
    level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MultiMapsManageRequest(betterproto.Message):
    """所有的Request均使用tuya DP发送"""

    method: "MultiMapsManageRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    rename: "MultiMapsManageRequestRename" = betterproto.message_field(3, group="Param")
    common: "MultiMapsManageRequestCommon" = betterproto.message_field(4, group="Param")
    save_options: "MultiMapsManageRequestSaveOptions" = betterproto.message_field(
        5, group="Param"
    )


@dataclass(eq=False, repr=False)
class MultiMapsManageRequestRename(betterproto.Message):
    cloud_mapid: int = betterproto.uint32_field(1)
    new_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MultiMapsManageRequestCommon(betterproto.Message):
    cloud_mapid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MultiMapsManageRequestSaveOptions(betterproto.Message):
    multi_map_sw: "Switch" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MultiMapsManageResponse(betterproto.Message):
    """
    请求中method == MAP_GET_ALL或MAP_GET_ONE时, 使用p2p传送
     其它使用tuya DP传送
    """

    method: "MultiMapsManageRequestMethod" = betterproto.enum_field(1)
    seq: int = betterproto.uint32_field(2)
    result: "MultiMapsManageResponseResult" = betterproto.enum_field(3)
    map_infos: "p2p.MapInfo" = betterproto.message_field(11, group="Param")
    complete_maps: "MultiMapsManageResponseCompleteMaps" = betterproto.message_field(
        12, group="Param"
    )


@dataclass(eq=False, repr=False)
class MultiMapsManageResponseCompleteMaps(betterproto.Message):
    """p2p同时加入, 请求中method == MAP_GET_ALL或MAP_GET_ONE时使用."""

    complete_map: List["p2p.CompleteMap"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SocketBroadcast(betterproto.Message):
    """==机器人定时向外广播=="""

    is_bind: bool = betterproto.bool_field(1)
    device_sn: str = betterproto.string_field(2)
    user_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class SocketVerify(betterproto.Message):
    """验证消息的 message 定义如下"""

    random: str = betterproto.string_field(1)
    device_sn: str = betterproto.string_field(2)
    user_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class SocketTransData(betterproto.Message):
    """==手机 app 发送数据=="""

    type: "SocketTransDataType" = betterproto.enum_field(1)
    distribute: "BtAppMsgDistribute" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Duration(betterproto.Message):
    level: "DurationLevel" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CollectDustCfg(betterproto.Message):
    cfg: "CollectDustCfgCfg" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CollectDustCfgV2(betterproto.Message):
    sw: "Switch" = betterproto.message_field(1)
    mode: "CollectDustCfgV2Mode" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CollectDustCfgV2Mode(betterproto.Message):
    value: "CollectDustCfgV2ModeValue" = betterproto.enum_field(1)
    task: int = betterproto.uint32_field(2)
    time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DryCfg(betterproto.Message):
    cfg: "DryCfgCfg" = betterproto.enum_field(1)
    duration: "Duration" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WashCfg(betterproto.Message):
    wash_freq: "WashCfgBackwashFreq" = betterproto.message_field(1)
    wash_duration: "Duration" = betterproto.message_field(2)
    cfg: "WashCfgCfg" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class WashCfgBackwashFreq(betterproto.Message):
    mode: "WashCfgBackwashFreqMode" = betterproto.enum_field(1)
    duration: "Duration" = betterproto.message_field(2)
    """按档位需要传下面的值（档位表示不同时长或者不同面积）"""

    time_or_area: "Numerical" = betterproto.message_field(3)
    """按数值需要传下面的值（表示不同时长或者不同面积）"""


@dataclass(eq=False, repr=False)
class CutHairCfg(betterproto.Message):
    sw: "Switch" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SelfPurifyingCfg(betterproto.Message):
    type: "SelfPurifyingCfgType" = betterproto.enum_field(1)
    standard_cfg: "SelfPurifyingCfgConfig" = betterproto.message_field(2)
    """
    设备始终上报所有的配置
     app 选择自定义时，需要下发 custom_cfg
    """

    strong_cfg: "SelfPurifyingCfgConfig" = betterproto.message_field(3)
    energy_saving_cfg: "SelfPurifyingCfgConfig" = betterproto.message_field(4)
    custom_cfg: "SelfPurifyingCfgConfig" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SelfPurifyingCfgConfig(betterproto.Message):
    frequency: "SelfPurifyingCfgConfigFrequency" = betterproto.message_field(1)
    intensity: "SelfPurifyingCfgConfigIntensity" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SelfPurifyingCfgConfigFrequency(betterproto.Message):
    mode: "SelfPurifyingCfgConfigFrequencyMode" = betterproto.enum_field(1)
    task: int = betterproto.uint32_field(2)
    time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SelfPurifyingCfgConfigIntensity(betterproto.Message):
    level: "SelfPurifyingCfgConfigIntensityLevel" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class AutoActionCfg(betterproto.Message):
    wash: "WashCfg" = betterproto.message_field(1)
    dry: "DryCfg" = betterproto.message_field(2)
    collectdust: "CollectDustCfg" = betterproto.message_field(3)
    detergent: bool = betterproto.bool_field(4)
    make_disinfectant: bool = betterproto.bool_field(5)
    collectdust_v2: "CollectDustCfgV2" = betterproto.message_field(6)
    cut_hair: "CutHairCfg" = betterproto.message_field(7)
    self_purifying: "SelfPurifyingCfg" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ManualActionCmd(betterproto.Message):
    self_maintain: bool = betterproto.bool_field(1, group="Cmd")
    go_dry: bool = betterproto.bool_field(2, group="Cmd")
    go_collect_dust: bool = betterproto.bool_field(3, group="Cmd")
    go_selfcleaning: bool = betterproto.bool_field(4, group="Cmd")
    go_remove_scale: bool = betterproto.bool_field(5, group="Cmd")
    go_cut_hair: bool = betterproto.bool_field(6, group="Cmd")
    go_selfpurifying: bool = betterproto.bool_field(7, group="Cmd")


@dataclass(eq=False, repr=False)
class StationRequest(betterproto.Message):
    """
    拖地模式下：
     回到基站自动触发清洗拖布；
     需要设置自动烘干拖布，才能烘干拖布；
    """

    auto_cfg: "AutoActionCfg" = betterproto.message_field(1)
    manual_cmd: "ManualActionCmd" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StationResponse(betterproto.Message):
    auto_cfg_status: "AutoActionCfg" = betterproto.message_field(1)
    status: "StationResponseStationStatus" = betterproto.message_field(2)
    clean_level: "StationResponseWaterLevel" = betterproto.enum_field(3)
    dirty_level: "StationResponseWaterLevel" = betterproto.enum_field(4)
    clean_water: "Numerical" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class StationResponseStationStatus(betterproto.Message):
    connected: bool = betterproto.bool_field(1)
    state: "StationResponseStationStatusState" = betterproto.enum_field(2)
    collecting_dust: bool = betterproto.bool_field(3)
    """各模块的状态"""

    clear_water_adding: bool = betterproto.bool_field(4)
    waste_water_recycling: bool = betterproto.bool_field(5)
    disinfectant_making: bool = betterproto.bool_field(6)
    cutting_hair: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class Undisturbed(betterproto.Message):
    sw: "Switch" = betterproto.message_field(1)
    begin: "UndisturbedTimePoint" = betterproto.message_field(2)
    end: "UndisturbedTimePoint" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class UndisturbedTimePoint(betterproto.Message):
    hour: int = betterproto.uint32_field(1)
    minute: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UndisturbedRequest(betterproto.Message):
    undisturbed: "Undisturbed" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UndisturbedResponse(betterproto.Message):
    active: "Active" = betterproto.message_field(1)
    undisturbed: "Undisturbed" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UnisettingRequest(betterproto.Message):
    """设置项"""

    children_lock: "Switch" = betterproto.message_field(1)
    cruise_continue_sw: "Switch" = betterproto.message_field(2)
    multi_map_sw: "Switch" = betterproto.message_field(3)
    ai_see: "Switch" = betterproto.message_field(4)
    multi_map_options: "UnisettingRequestMultiMapOptions" = betterproto.message_field(5)
    wifi_setting: "UnisettingRequestWifiSetting" = betterproto.message_field(6)
    water_level_sw: "Switch" = betterproto.message_field(7)
    suggest_restricted_zone_sw: "Switch" = betterproto.message_field(8)
    deep_mop_corner_sw: "Switch" = betterproto.message_field(9)
    dust_full_remind: "Numerical" = betterproto.message_field(10)
    live_photo_sw: "Switch" = betterproto.message_field(11)
    smart_follow_sw: "Switch" = betterproto.message_field(12)
    poop_avoidance_sw: "Switch" = betterproto.message_field(13)
    pet_mode_sw: "Switch" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class UnisettingRequestMultiMapOptions(betterproto.Message):
    retain: "UnisettingRequestMultiMapOptionsRetain" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UnisettingRequestMultiMapOptionsRetain(betterproto.Message):
    map_id: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnisettingRequestWifiSetting(betterproto.Message):
    deletion: "UnisettingRequestWifiSettingDeletion" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UnisettingRequestWifiSettingDeletion(betterproto.Message):
    ssid: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Unistate(betterproto.Message):
    mop_holder_state_l: "Switch" = betterproto.message_field(1)
    mop_holder_state_r: "Switch" = betterproto.message_field(2)
    custom_clean_mode: "Switch" = betterproto.message_field(3)
    map_valid: "Active" = betterproto.message_field(4)
    mop_state: "Switch" = betterproto.message_field(5)
    live_map: "UnistateLiveMap" = betterproto.message_field(6)
    clean_strategy_version: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class UnistateLiveMap(betterproto.Message):
    state_bits: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WifiData(betterproto.Message):
    ap: List["WifiDataAp"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WifiDataAp(betterproto.Message):
    ssid: str = betterproto.string_field(1)
    frequency: "WifiDataApFrequency" = betterproto.enum_field(2)
    connection: "WifiDataApConnection" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WifiDataApConnection(betterproto.Message):
    result: "WifiDataApConnectionResult" = betterproto.enum_field(1)
    timestamp: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class UnisettingResponse(betterproto.Message):
    """设置项或状态项"""

    children_lock: "Switch" = betterproto.message_field(1)
    cruise_continue_sw: "Switch" = betterproto.message_field(2)
    multi_map_sw: "Switch" = betterproto.message_field(3)
    ai_see: "Switch" = betterproto.message_field(4)
    water_level_sw: "Switch" = betterproto.message_field(5)
    suggest_restricted_zone_sw: "Switch" = betterproto.message_field(6)
    deep_mop_corner_sw: "Switch" = betterproto.message_field(7)
    dust_full_remind: "Numerical" = betterproto.message_field(8)
    live_photo_sw: "Switch" = betterproto.message_field(9)
    unistate: "Unistate" = betterproto.message_field(10)
    ap_signal_strength: int = betterproto.uint32_field(11)
    wifi_data: "WifiData" = betterproto.message_field(12)
    smart_follow_sw: "Switch" = betterproto.message_field(13)
    poop_avoidance_sw: "Switch" = betterproto.message_field(14)
    pet_mode_sw: "Switch" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class UniversalDataRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UniversalDataResponse(betterproto.Message):
    cur_map_room: "UniversalDataResponseRoomTable" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UniversalDataResponseRoomTable(betterproto.Message):
    map_id: int = betterproto.uint32_field(1)
    data: List["UniversalDataResponseRoomTableData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UniversalDataResponseRoomTableData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    scene: "RoomScene" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class QueryUpgradeStatus(betterproto.Message):
    """Request"""

    pass


@dataclass(eq=False, repr=False)
class UpgradeStatus(betterproto.Message):
    """Response"""

    status: "UpgradeStatusStatus" = betterproto.enum_field(1)
    progress: int = betterproto.uint32_field(2)
    error: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class WorkStatus(betterproto.Message):
    mode: "WorkStatusMode" = betterproto.message_field(1)
    state: "WorkStatusState" = betterproto.enum_field(2)
    charging: "WorkStatusCharging" = betterproto.message_field(3)
    upgrading: "WorkStatusUpgrading" = betterproto.message_field(4)
    mapping: "WorkStatusMapping" = betterproto.message_field(5)
    cleaning: "WorkStatusCleaning" = betterproto.message_field(6)
    go_wash: "WorkStatusGoWash" = betterproto.message_field(7)
    go_home: "WorkStatusGoHome" = betterproto.message_field(8)
    cruisiing: "WorkStatusCruisiing" = betterproto.message_field(9)
    relocating: "WorkStatusRelocating" = betterproto.message_field(10)
    breakpoint: "WorkStatusBreakpoint" = betterproto.message_field(11)
    roller_brush_cleaning: "WorkStatusRollerBrushCleaning" = betterproto.message_field(
        12
    )
    smart_follow: "WorkStatusSmartFollow" = betterproto.message_field(13)
    station: "WorkStatusStation" = betterproto.message_field(14)
    current_scene: "WorkStatusScene" = betterproto.message_field(19)
    trigger: "WorkStatusTrigger" = betterproto.message_field(20)


@dataclass(eq=False, repr=False)
class WorkStatusMode(betterproto.Message):
    """
    刚开机时，不用传 mode，由手机 app 自行决定展示默认值
     mode 由手机 app 下发或按键更改，回复值和上次相同
    """

    value: "WorkStatusModeValue" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusCharging(betterproto.Message):
    state: "WorkStatusChargingState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusUpgrading(betterproto.Message):
    state: "WorkStatusUpgradingState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusMapping(betterproto.Message):
    state: "WorkStatusMappingRunState" = betterproto.enum_field(1)
    mode: "WorkStatusMappingMode" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class WorkStatusCleaning(betterproto.Message):
    state: "WorkStatusCleaningRunState" = betterproto.enum_field(1)
    mode: "WorkStatusCleaningMode" = betterproto.enum_field(2)
    scheduled_task: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class WorkStatusGoWash(betterproto.Message):
    state: "WorkStatusGoWashRunState" = betterproto.enum_field(1)
    mode: "WorkStatusGoWashMode" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class WorkStatusGoHome(betterproto.Message):
    state: "WorkStatusGoHomeRunState" = betterproto.enum_field(1)
    mode: "WorkStatusGoHomeMode" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class WorkStatusCruisiing(betterproto.Message):
    state: "WorkStatusCruisiingRunState" = betterproto.enum_field(1)
    mode: "WorkStatusCruisiingMode" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class WorkStatusRelocating(betterproto.Message):
    state: "WorkStatusRelocatingState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusBreakpoint(betterproto.Message):
    state: "WorkStatusBreakpointState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusRollerBrushCleaning(betterproto.Message):
    state: "WorkStatusRollerBrushCleaningState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusSmartFollow(betterproto.Message):
    state: "WorkStatusSmartFollowState" = betterproto.enum_field(1)
    mode: "WorkStatusSmartFollowMode" = betterproto.enum_field(2)
    elapsed_time: int = betterproto.uint32_field(3)
    area: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class WorkStatusStation(betterproto.Message):
    water_injection_system: "WorkStatusStationWaterInjectionSystem" = (
        betterproto.message_field(1)
    )
    dust_collection_system: "WorkStatusStationDustCollectionSystem" = (
        betterproto.message_field(2)
    )
    washing_drying_system: "WorkStatusStationWashingDryingSystem" = (
        betterproto.message_field(3)
    )
    water_tank_state: "WorkStatusStationWaterTankState" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WorkStatusStationWaterInjectionSystem(betterproto.Message):
    """注水系统，操作对象：机器人水箱"""

    state: "WorkStatusStationWaterInjectionSystemState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusStationDustCollectionSystem(betterproto.Message):
    """集尘系统，操作对象：机器人集尘盒"""

    state: "WorkStatusStationDustCollectionSystemState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusStationWashingDryingSystem(betterproto.Message):
    """洗和烘干系统，操作对象：机器人拖布"""

    state: "WorkStatusStationWashingDryingSystemState" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class WorkStatusStationWaterTankState(betterproto.Message):
    """基站水箱状态"""

    clear_water_adding: bool = betterproto.bool_field(1)
    waste_water_recycling: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class WorkStatusScene(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    elapsed_time: int = betterproto.uint32_field(2)
    estimate_time: int = betterproto.uint32_field(3)
    name: str = betterproto.string_field(4)
    task_mode: "WorkStatusSceneTaskMode" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class WorkStatusTrigger(betterproto.Message):
    source: "WorkStatusTriggerSource" = betterproto.enum_field(1)
