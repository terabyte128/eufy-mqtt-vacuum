/**
 * 清洁记录.
 */
syntax = "proto3";

// option optimize_for = LITE_RUNTIME;

package proto.cloud;

import "proto/cloud/clean_param.proto";
import "proto/cloud/stream.proto";
import "proto/cloud/p2pdata.proto";

// 手机 app 优先获取 xxxRecordDesc
// CleanRecordDesc 数据格式：
// 0xAA 0x01 len(1 byte 数据段的长度) ... checksum(2 byte 除 checksum 外所有字节的和，高字节先发)
// CruiseRecordDesc 数据格式：
// 0xAA 0x02 len(1 byte 数据段的长度) ... checksum(2 byte 除 checksum 外所有字节的和，高字节先发)

message CleanRecordDesc {
    uint64 start_time = 1;     // 不加时区，单位: s
    uint64 end_time = 2;       // 不加时区，单位: s
    uint32 duration = 3;       // 清洁时长，单位：s
    uint32 area = 4;           // 清洁面积，单位: m2
    CleanType clean_type = 5;  // 扫、拖、扫+拖

    enum FinishReason {
        COMPLETED = 0;  // 自动清扫完成
        MANUDAL = 1;    // 人为停止
        LOW_POWER = 2;  // 低电
        EXCEPTION = 3;  // 异常中断（需要填充 Extra 中 error_code 或 warn_code）
    }
    FinishReason finish_reason = 6;

    message Extra {
        enum Mode {
            AUTO = 0;           // 全局自动清洁
            SELECT_ROOM = 1;    // 选房清洁
            SELECT_ZONE = 2;    // 选区清洁
            SPOT = 3;           // 定点清洁
            SCHEDULE_AUTO_CLEAN = 4;  // 预约自动清扫
            SCHEDULE_ROOMS_CLEAN = 5; // 预约房间清扫
        }
        Mode mode = 1;

        // MUS 功能（根据项目定义进行选配）
        //    bit-0: 执行过洗拖布
        //    bit-1: 执行过烘干拖布
        //    bit-2: 执行过集尘
        //    bit-3: 执行过滚刷自清洁
        uint32 mus = 2;

        // 清扫错误码，正常为 0
        // 值来自 error_code_list_xxx.proto
        uint32 error_code = 3;

        // 清扫警告码，正常为 0
        // 值来自 error_code_list_xxx.proto
        uint32 prompt_code = 4;
    }
    Extra extra = 7;
}

message CleanRecordData {
    stream.RestrictedZone restricted_zone = 1;
    stream.TemporaryData temp_data = 2;
    stream.RoomParams room_params = 3;

    // id 4 不再使用
    // id 5 不再使用

    // 上传格式： 头部 Point Point Point Point ...  Point
    //           其中头部格式： 0xAA 0x03 [4字节 map_id] [4字节 releases]
    bytes path_data = 6;               // 轨迹（目前未压缩）

    // id 7 不再使用
    // id 8 不再使用
    // id 9 不再使用

    stream.Map map = 10;
    stream.RoomOutline room_outline = 11;
    stream.ObstacleInfo obstacle_info = 12;

    message PathData {
        repeated stream.PathPoint points = 1;
    }
    PathData path_data_v2 = 13;     // 存在该字段使用新的轨迹数据格式

    /* p2p通道 清扫记录使用以下参数，不使用上述参数  */
    p2p.CompleteMap map_p2p = 20;       //完整地图
    p2p.CompletePath path_p2p = 21;     //完整路径
}

message CruiseRecordDesc {
    uint64 start_time = 1;     // 不加时区，单位: s
    uint64 end_time = 2;       // 不加时区，单位: s
    uint32 duration = 3;       // 巡航时长，单位：s

    enum FinishReason {
        COMPLETED = 0;  // 自动巡航完成
        MANUDAL = 1;    // 人为停止
        LOW_POWER = 2;  // 低电
        EXCEPTION = 3;  // 异常中断
    }
    FinishReason finish_reason = 4;

    message Extra {
        enum Mode {
            GLOBAL_CRUISE = 0;       // 全屋巡航
            POINT_CRUISE = 1;        // 精准巡航
            ZONES_CRUISE = 2;        // 选区巡航
            SCHEDULE_CRUISE = 3;     // 预约巡航
        }
        Mode mode = 1;
    }
    Extra extra = 7;
}

message CruiseRecordData {
    stream.RestrictedZone restricted_zone = 1;
    stream.TemporaryData temp_data = 2;
    stream.RoomParams room_params = 3;
    stream.ObstacleInfo obstacle_info = 4;

    // 上传格式： 头部 Point Point Point Point ...  Point
    //           其中头部格式： 0xAA 0x03 [4字节 map_id] [4字节 releases]
    bytes path_data = 5;            // 轨迹（目前未压缩）
    stream.CruiseData cruise_data = 6;
    stream.Map map = 7;
    stream.RoomOutline room_outline = 8;

    /* p2p通道 使用以下参数，不使用 除 cruise_data 以外的上述参数  */
    p2p.CompleteMap map_p2p = 20;       //完整地图
    p2p.CompletePath path_p2p = 21;     //完整路径
}
