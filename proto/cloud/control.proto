syntax = "proto3";

// option optimize_for = LITE_RUNTIME;

package proto.cloud;

import "proto/cloud/common.proto";
import "proto/cloud/clean_param.proto";

// 遥控器方向
message RemoteCtrl {
    enum Direction {
        BRAKE = 0;   // App可及时停止前面的遥控指令紧急刹车(不是退出遥控模式),比如在按键抬起时下发
        FORWARD = 1;
        BACK = 2;
        LEFT = 3;
        RIGHT = 4;
    }
    // App下发任意FORWARD/BACK/LEFT/RIGHT即进入遥控模式
    Direction direction = 1;
}

// 通用全局清扫，清洁参数走 clean_param 中 clean_param 参数
// 定制全局清扫，设置每个房间不同的清扫参数走 stream 定制参数 - x10 开始不受支持
// 通过 MapEditRequest.RoomsCustom.custom_enable 判断使用哪种参数 - x10 开始不受支持
message AutoClean {
    // 总清扫次数
    uint32 clean_times = 1; // 清扫次数，非 0 有效
    // 强制建图（即使当前有图也会重新建图）
    bool force_mapping = 2;
}

// 通用房间清扫，清洁参数走 clean_param 中 area_clean_param 参数
// 定制房间清扫，设置每个房间不同的清扫参数走 stream 定制参数（通过 MapEditRequest.RoomsCustom 设置）
// 通过 type 判断使用哪种参数
message SelectRoomsClean {
    message Room {
        uint32 id = 1;
        uint32 order = 2;
    }
    repeated Room rooms = 1;  // 定制房间清扫该字段也要传，虽然和 stream 中的部分信息重复
    uint32 clean_times = 2; // 通用清扫次数，非 0 有效。定制清扫次数放在 stream 中

    uint32 map_id = 3;    // map 的 id 号
    uint32 releases = 4;  // map 的大版本修正号

    enum Mode {
        GENERAL = 0;    // 通用清扫
        CUSTOMIZE = 1;  // 定制清扫
    }
    Mode mode = 5;
}

message SelectZonesClean {
    message Zone {
        Quadrangle quadrangle = 1;
        uint32 clean_times = 2; // 清扫次数，非 0 有效
    }
    repeated Zone zones = 1;

    uint32 map_id = 2;    // map 的 id 号
    uint32 releases = 3;  // map 的大版本修正号

    enum Type {
        NORMAL = 0;         // 普通清扫
        POOP_CLEANING = 1;  // 便便补扫
    }
    Type type = 4;
}

message SceneClean {
    uint32 scene_id = 1;
}

message SpotClean {
    uint32 clean_times = 1; // 清扫次数，非 0 有效
}

message Goto {
    Point destination = 1;

    enum Type {
        GOTO_DESTINATION = 0;   // 只去目的地
        GOTO_SPOT = 1;
        GOTO_AUTO = 2;
    }
    Type type = 2;
    uint32 clean_times = 3; // 清扫次数，非 0 有效，SPOT 清扫才有效

    uint32 map_id = 4;    // map 的 id 号
    uint32 releases = 5;  // map 的大版本修正号
}

message ScheduleAutoClean {
    Fan fan = 1;
    MopMode mop_mode = 2;
    CleanType clean_type = 3;
    CleanExtent clean_extent = 4;
}

message ScheduleRoomsClean {
    Fan fan = 1;
    MopMode mop_mode = 2;
    CleanType clean_type = 3;
    CleanExtent clean_extent = 4;

    message Room {
        uint32 id = 1;
        uint32 order = 2;
    }
    repeated Room rooms = 5;

    uint32 map_id = 6;
    uint32 releases = 7;  // map 的大版本修正号
}

// 用户设置的全局巡航点通过地图编辑下发
message GlobalCruise {
    uint32 map_id = 1;
    uint32 releases = 2;  // map 的大版本修正号
}

message PointCruise {
    Point points = 1;
    uint32 map_id = 2;    // map 的 id 号
    uint32 releases = 3;  // map 的大版本修正号
}

message ZonesCruise {
    repeated Point points = 1;
    uint32 map_id = 2;    // map 的 id 号
    uint32 releases = 3;  // map 的大版本修正号
}

message ScheduleCruise {
    uint32 map_id = 1;
    uint32 releases = 2;  // map 的大版本修正号
}

message ModeCtrlRequest {
    enum Method {
        START_AUTO_CLEAN = 0;           // 开始全局自动清扫
        START_SELECT_ROOMS_CLEAN = 1;   // 开始选房清扫
        START_SELECT_ZONES_CLEAN = 2;   // 开始选区清扫
        START_SPOT_CLEAN = 3;           // 开始当前位置局部清扫
        START_GOTO_CLEAN = 4;           // 开始移动位置局部清扫
        START_RC_CLEAN = 5;             // 开始遥控清扫
        START_GOHOME = 6;               // 开始回充
        START_SCHEDULE_AUTO_CLEAN = 7;  // 预约自动清扫，适用于定时下发消息的方案，后续项目不使用
        START_SCHEDULE_ROOMS_CLEAN = 8; // 预约房间清扫，适用于定时下发消息的方案，后续项目不使用
        START_FAST_MAPPING = 9;         // 快速建图
        START_GOWASH = 10;              // 开始回洗
        STOP_TASK = 12;                 // 停止清扫（巡航）任务
        PAUSE_TASK = 13;                // 暂停清扫（巡航）任务
        RESUME_TASK = 14;               // 恢复清扫（巡航）任务
        STOP_GOHOME = 15;               // 停止回充
        STOP_RC_CLEAN = 16;             // 停止遥控清扫
        STOP_GOWASH = 17;               // 停止回洗
        STOP_SMART_FOLLOW = 18;         // 停止智能跟随
        START_GLOBAL_CRUISE = 20;       // 全屋巡航
        START_POINT_CRUISE = 21;        // 精准巡航
        START_ZONES_CRUISE = 22;        // 选区巡航
        START_SCHEDULE_CRUISE = 23;     // 预约巡航，适用于定时下发消息的方案，后续项目不使用
        START_SCENE_CLEAN = 24;         // 开始场景清扫
        START_MAPPING_THEN_CLEAN = 25;  // 先建图再清扫
    }

    Method method = 1;
    uint32 seq = 2;

    oneof Param {
        AutoClean auto_clean = 3;
        SelectRoomsClean select_rooms_clean = 4;
        SelectZonesClean select_zones_clean = 5;
        SpotClean spot_clean = 6;
        Goto go_to = 7;
        ScheduleAutoClean sche_auto_clean = 8;
        ScheduleRoomsClean sche_rooms_clean = 9;
        GlobalCruise global_cruise = 10;
        PointCruise point_cruise = 11;
        ZonesCruise zones_cruise = 12;
        ScheduleCruise sche_cruise = 13;
        SceneClean scene_clean = 14;
    }
}

// TODO: 可以考虑不返回，执行成功后状态会相应改变.
message ModeCtrlResponse {
    ModeCtrlRequest.Method method = 1;
    uint32 seq = 2;   // 返回 ModeCtrlRequest 相同的 seq 值.

    enum Result {
        SUCCESS = 0;
        FAILED = 1;
    }
    Result result = 3;
}
