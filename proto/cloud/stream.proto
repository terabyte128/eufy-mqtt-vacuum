/**
 * 流通道
 */
syntax = "proto3";

// option optimize_for = LITE_RUNTIME;

package proto.cloud.stream;

import "proto/cloud/common.proto";
import "proto/cloud/clean_param.proto";
import "proto/cloud/control.proto";
import "proto/cloud/scene.proto";

/**
 * 通道、版本信息.
 *
 * @note: Delimited 方式序列化.
 */
message Metadata {
    message Versions {
        // 只针对非 protobuf 格式的通道，protobuf协议本身是向下兼容的；
        uint32 map_data = 1;
    }
    Versions versions = 1;

    message ChanIds {
        // 地图信息通道，使用 message MapInfo 解析;
        uint32 map_info = 1;

        // 路径数据通道，使用 message Path 解析;
        uint32 path = 2;

        // 房间轮廓，使用 message RoomOutline 解析;
        uint32 room_outline = 3;

        // 房间参数信息，使用 message RoomParams 解析;
        uint32 room_params = 4;

        // 禁区信息，使用 message RestrictedZone 解析;
        uint32 restricted_zone = 5;

        // 动态数据，主要是位姿，使用 message DynamicData 解析;
        uint32 dynamic_data = 6;

        // 临时数据通道，包括选区、指哪到哪等参数，使用 message TemporaryData 解析;
        uint32 temporary_data = 7;

        // 视觉识别的物体信息，使用 message ObstacleInfo 解析;
        uint32 obstacle_info = 8;

        // 地图数据，使用 message Map 解析.
        uint32 map_data = 9;

        // 巡航点数据，使用 message CruiseData 解析;
        uint32 cruise_data = 10;
    }
    ChanIds chan_ids = 2;
}

/**
 * 地图信息.
 *
 * @note: Delimited 方式序列化.
 */
message MapInfo {
    uint32 map_id = 1;  // id 1 不再使用，兼容回放系统留到 2023/01/22 再删除

    uint32 width = 2;
    uint32 height = 3;
    uint32 resolution = 4;    // 单位： m x 100

    Point origin = 5;         // 原点
    repeated Pose docks = 6;  // 支持多个充电座/基站

    enum Type {
        INCOMPLETE = 0;     // 不完善的地图
        ROUGH = 1;          // 粗糙的完整地图（快速产生的地图）
        EFFECTIVE = 2;      // 有效的完整地图（清洁建图、快速建图后继续清洁产生的地图）
        LIST_FULL = 3;      // 列表已满（通知 app 需要替换一张多地图或者忽略当前地图）
    }
    Type type = 7;

    uint32 seq = 8;  // id 8 不再使用，兼容回放系统留到 2023/01/22 再删除
    uint32 angle = 9;    // 顺时针的角度的度数，如 90，180

    message Dock {
        enum Type {
            ADAPTER = 0;    // 充电座
            STATION = 1;    // 基站
        }
        Dock.Type type = 1;
        Pose pose = 2;
    }
    repeated Dock docks_v2 = 10;  // 支持多个充电座/基站
}

/**
 * 地图帧数据, 可全量和增量上传.
 *     当 Frame 为 I 时，表示全量地图，机器端会先清除地图subid通道数据；
 *     当 Frame 为 P 时，表示增量地图；
 *
 * @note: Delimited 方式序列化.
 */
message Map {
    uint32 map_id = 1;  // id 1 不再使用，兼容回放系统留到 2023/01/22 再删除
    uint32 seq = 2;  // id 2 不再使用，兼容回放系统留到 2023/01/22 再删除

    enum Frame {
        I = 0;   // 全量地图
        P = 1;   // 增量地图
    }
    Frame frame = 3;

    enum PixelValue {
        UNKNOW = 0;
        OBSTACLE = 1;
        FREE = 2;
        CARPET = 3;
    }
    /**
     * 地图像素数据，目前采用 LZ4 压缩;
     * 每个像素占 2bit，即4种值，与上面 enum PixelValue 对应.
     * 像素从字节低位bit开始.
     */
    bytes pixels = 4;   // 地图压缩

    /**
     * 地图像素原始size, 如果pixels有压缩，则 pixel_size 表示解压后的长度.
     */
    uint32 pixel_size = 5;

    MapInfo info = 6;     // map 的信息
    string name = 7;      // map 的名称
    uint32 id = 8;        // map 的 id 号
    uint32 releases = 9;  // map 的大版本修正号

    message Index {
        uint32 value = 1;   // 地图索引，0 表示实时地图，1~MULTI_MAP_NUM 表示多地图中的地图索引
    }
    Index index = 10;
}

/**
 * 路径数据，增量上传.
 *
 * @note: Delimited 方式序列化.
 */
/** xy 信息如下:
      byte 1-2:  x 坐标, byte1高字节，最高位为符号位, byte2为低字节;
      byte 3-4:  y 坐标，byte3高字节，最高位为符号位, byte4为低字节;
    flags 信息如下:
      byte 1:    flags信息，
        bit 0-3 类型，见下方定义：
                SWEEP = 0,              // 纯扫
                MOP = 1,                // 纯拖地
                SWEEP_MOP = 2,          // 扫+拖地
                FAST_MAPPING = 3,       // 快速建图运行轨迹
                CRUISIING = 4,          // 全屋巡航运行轨迹
                POINT_TO_POINT = 5,     // 指哪到哪运行轨迹
                REMOTE_CTRL = 6,        // 遥控运行轨迹
                GO_CHARGE_IN_WORK = 7,  // 任务中回充轨迹
                GO_CHARGE = 8,          // 任务结束回充轨迹
                GO_WASH_IN_WORK = 9,    // 任务中回洗轨迹
                GO_WASH = 10,           // 任务结束回洗轨迹
                EXPLORE_STATIONS = 11,  // 探索基站轨迹
                NAVIGATION = 12,        // 分区之间导航轨迹
                RESUME_CLEANING = 13,   // 回充回洗后的续扫轨迹
                RETURN_START_POINT = 14,  // 回充失败再返回起点的轨迹
                HIDE = 15,  // 隐藏轨迹（轨迹优化使用）同时需要使能 AppFunction.optimization.PATH_HIDE_TYPE
        bit 4: 状态，0 - 继续上一轨迹点， 1 - 新轨迹点，与上一轨迹点不连续；
        bit 5: 是否显示轨迹，0 - 不显示，1 - 显示；
        bit 6: 是否显示机器人，0 - 不显示，1 - 显示；
        bit 7: 预留；
      byte 2:    task_motion_type；
      byte 3-4:  预留；
 */
message PathPoint {
    // bit0~15 为 x 坐标
    // bit16~31 为 y 坐标
    uint32 xy = 1;
    // bit0~3 为 point_type
    // bit4 为 break_type
    // bit5 为 show_trajectory_flag
    // bit6 为 show_robot_flag
    // bit7 预留
    // bit8~15 为 task_motion_type
    // bit16~23 预留
    // bit24~31 预留
    uint32 flags = 2;
}

/**
 * 房间轮廓信息（使用包含分区信息的地图），单次上传.
 *
 * @note: Delimited 方式序列化.
 */
 message RoomOutline {
    uint32 map_id = 1;    // map 的 id 号
    uint32 releases = 2;  // map 的大版本修正号

    uint32 width = 3;
    uint32 height = 4;
    uint32 resolution = 5; // 单位： m x 100
    Point origin = 6;

    /**
     * 地图像素数据，目前采用 LZ4 压缩;
     * 每个像素占 1byte，表示房间 id
     */
    bytes pixels = 7;   // 地图压缩

    /**
     * 地图像素原始size, 如果pixels有压缩，则 pixel_size 表示解压后的长度.
     */
    uint32 pixel_size = 8;
}

/**
 * 房间参数，单次上传.
 *
 * @note: Delimited 方式序列化.
 */
message RoomParams {
    // 定制化清扫参数使能.
    bool custom_enable = 1; // x10 以后不再使用

    message Room {
        uint32 id = 1;
        string name = 2;  // 默认名称为 ""，表示未命名
        Floor floor = 3;
        RoomScene scene = 4;  // 场景（类型+索引）

        // 定制化顺序.
        message Order {
            uint32 value = 1;
        }
        Order order = 6;

        // 定制化参数.
        message Custom {
            CleanType clean_type = 1;
            Fan fan = 2;
            MopMode mop_mode = 3;
            CleanExtent clean_extent = 4;
            uint32 clean_times = 5; // 清扫次数，非 0 有效
        }
        Custom custom = 7;
    }
    repeated Room rooms = 2;

    uint32 map_id = 3;    // map 的 id 号
    uint32 releases = 4;  // map 的大版本修正号

    // enum ModeType {
    //     CUSTOM = 0;     // 通用/定制模式，x10 以后不再使用
    //     SMART = 1;      // 智能模式
    // }
    // ModeType mode_type = 5;
    Switch smart_mode_sw = 6; // 智能省心模式开关
}

/**
 * 禁区信息，单次上传.
 *
 * @note: Delimited 方式序列化.
 */
message RestrictedZone {
    repeated Line virtual_walls = 1;
    repeated Quadrangle forbidden_zones = 2;
    repeated Quadrangle ban_mop_zones = 3;

    uint32 map_id = 4;    // map 的 id 号
    uint32 releases = 5;  // map 的大版本修正号

    // 自动推荐，只有推荐的禁区有 id 信息，由机器端生成，逐渐增加
    // 机器要做到：
    // 1. 存在推荐禁区后，再收到一次编辑禁区消息，需要删除推荐禁区，将设置的推荐禁区转为编辑禁区
    // 2. 推荐的禁区没有被设置，那么机器后面就不应该再推荐这个禁区
    message Suggestion {
        message LineWrap {
            uint32 id = 1;
            Line line = 2;
        }
        message QuadrangleWrap {
            uint32 id = 1;
            Quadrangle quadrangle = 2;
        }

        repeated LineWrap virtual_walls = 1;
        repeated QuadrangleWrap forbidden_zones = 2;
        repeated QuadrangleWrap ban_mop_zones = 3;
    }
    Suggestion suggestion = 7;
}

/**
 * 动态数据，单次上传.
 *
 * @note: Delimited 方式序列化.
 */
message DynamicData {
    Pose cur_pose = 1;   // 当前位姿
}

/**
 * 存储临时数据，机器端不主动清除，app根据workstatus自行判断数据是否有效.
 * 单次上传.
 *
 * @note: Delimited 方式序列化.
 */
message TemporaryData {
    .proto.cloud.SelectRoomsClean select_rooms_clean = 1;
    .proto.cloud.SelectZonesClean select_zones_clean = 2;
    .proto.cloud.Goto goto_location = 3;
    .proto.cloud.PointCruise select_point_cruise = 4;
    .proto.cloud.ZonesCruise select_zones_cruise = 5;
}

/**
 * 物体数据信息，单次上传.
 *
 * @note: Delimited 方式序列化.
 */
message ObstacleInfo {
    uint32 map_id = 1;    // map 的 id 号
    uint32 releases = 2;  // map 的大版本修正号

    message Obstacle {
        string object_type = 1;

        enum ShowType {
            POSITION = 0;   // 坐标: show_points 只有一个
            OUTLINE = 1;    // 轮廓
            FILL = 2;       // 填充
            BITMAP = 3;     // 位图（左上坐标+长宽+mask序列，bit为0表示空，为1表示存在）
        }
        ShowType show_type = 2;

        repeated Point show_points = 3;  // TODO: 考虑 3D

        message Bitmap {
            Point ref_point = 1;    // 参考点，bitmap 以此为左上角
            uint32 width = 2;
            uint32 height = 3;
            uint32 data_len = 4;
            bytes data = 5;         // 单bit描述一个点，bit为0表示空，为1表示存在
        }
        Bitmap bitmap = 4;

        sint32 theta = 5;   // 物体方向，单位: rad * 100

        string photo_id = 6;    // 照片 id

        uint32 accuracy = 7;    // 准确率，0~100，表示百分比（0 表示无效）

        message Valid {
            bool value = 1;
        }
        Valid valid = 8;    // 是否有效
    }
    repeated Obstacle obstacles = 3;
}

/**
 * 巡航数据.
 * 更新频率：巡航指令后更新一次（照片 id 为空），结束巡航后更新一次（一次性写入照片 id）
 *
 * @note: Delimited 方式序列化.
 */
message CruiseData {
    message ProcessData {
        Point points = 1;   // 巡航点（收到巡航指令后更新一次，照片 id 可为空）

        repeated string photo_id = 2; // 每个巡航点关联的照片 id（结束巡航一次性写入）
    }
    repeated ProcessData cruise_data = 1;

    uint32 map_id = 2;    // map 的 id 号
    uint32 releases = 3;  // map 的大版本修正号
}

/**
 * 地图描述，单次上传.
 *
 * @note: Delimited 方式序列化.
 */
 message MapDescription {
    // id 1 不再使用

    string name = 2;        // 地图名
    uint32 create_cause = 3;
    uint64 create_time = 4; // 创建时间
    uint64 last_time = 5;   // 最后更新时间
    uint32 map_id = 6;      // map 的 id 号
    uint32 releases = 7;    // map 的大版本修正号
}

/**
 * 地图备份，单次上传.
 *
 * @note: Delimited 方式序列化.
 */
message MapBackup {
    MapDescription desc = 1;
    Map map = 2;
    RoomOutline rooms = 3;
    RoomParams room_params = 4;
    RestrictedZone restricted_zone = 5;
}

/**
 * 场景信息，单次上传.
 *
 * @note: Delimited 方式序列化.
 */
message SceneWrap {
    message Scene {
        SceneInfo info = 1;
        repeated SceneTask tasks = 2;
    }
    repeated Scene scenes = 1;
}