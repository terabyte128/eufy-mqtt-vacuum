syntax = "proto3";

// option optimize_for = LITE_RUNTIME;

package proto.cloud;

import "proto/cloud/common.proto";
import "proto/cloud/clean_param.proto";

message TimerInfo {
    // 手机 app 新建定时不需要该字段，设备返回 id
    // 手机 app 其他操作需要该字段
    message Id {
        uint32 value = 1;
    }
    Id id = 1;

    message Status {
        bool valid = 1;
        bool opened = 2;
    }
    Status status = 2;

    message Desc {
        enum Trigger {
            SINGLE = 0;          // 单次触发
            CYCLE = 1;           // 周期触发
        }
        Trigger trigger = 1;

        message Timing {
            uint32 user_tz = 1;  // 用户时区，单位 s
            bool summer = 2;     // 用户是否处于夏令时的国家或地区
            uint32 hours = 3;
            uint32 minutes = 4;
        }
        Timing timing = 2;

        // 周期触发需要有以下字段描述周期
        // 这里的 week 指用户感知的周，机器需要结合用户时区来判断某天对应的时间
        message Cycle {
            uint32 week_bits = 1;  // bit-0 周日 bit-1 ... bit-6 周一~周六
        }
        Cycle cycle = 3;
    }
    Desc desc = 3;

    message Addition {
        uint64 create_time = 1;     // 创建时间
        string create_user_id = 2;  // 创建用户 id
        uint64 renew_time = 3;      // 修改时间
        string renew_user_id = 4;   // 修改用户 id
    }
    Addition addition = 4;

    message Action {
        enum Type {
            SCHEDULE_AUTO_CLEAN = 0;   // 预约自动清扫
            SCHEDULE_ROOMS_CLEAN = 1;  // 预约房间清扫
            SCHEDULE_CRUISE = 2;       // 预约巡航
            SCHEDULE_SCENE_CLEAN = 3;  // 预约场景清扫
        }
        Type type = 1;

        // 前置操作
        message Precondition {
            // TODO
        }
        Precondition precondition = 2;

        enum Mode {
            GENERAL = 0;    // 通用模式
            CUSTOMIZE = 1;  // x9 定制清洁和 stream 房间参数关联，x10 后和 ScheduleRoomsClean.Custom 关联
        }

        message ScheduleAutoClean {
            Mode mode = 1;

            message General {
                // 智能省心模式开关关闭时才有下面 4 个字段
                Fan fan = 1;
                MopMode mop_mode = 2;
                CleanType clean_type = 3;
                CleanExtent clean_extent = 4;

                Switch smart_mode_sw = 5;   // 智能省心模式开关
            }
            General general = 2;
        }

        message ScheduleRoomsClean {
            Mode mode = 1;

            message General {  // x9 通用模式有效，x10 之后不再使用
                uint32 map_id = 1;

                Fan fan = 2;
                MopMode mop_mode = 3;
                CleanType clean_type = 4;
                CleanExtent clean_extent = 5;

                message Room {
                    uint32 id = 1;
                    uint32 order = 2;
                }
                repeated Room rooms = 6;
            }
            General general = 2;

            message Custom {  // x9 定制模式不走这里，走 stream，x10 之后房间清洁走这里
                uint32 map_id = 1;
                Switch smart_mode_sw = 2;   // 智能省心模式开关

                message Room {
                    uint32 id = 1;
                    uint32 order = 2;

                    // 智能省心模式开关关闭时才有下面 4 个字段
                    CleanType clean_type = 6;
                    Fan fan = 7;
                    MopMode mop_mode = 8;
                    CleanExtent clean_extent = 9;

                    uint32 clean_times = 10;    // 清扫次数，非 0 有效
                }
                repeated Room rooms = 3;
            }
            Custom custom = 3;
        }

        message ScheduleCruise {
            uint32 map_id = 1;
        }

        message ScheduleSceneClean {
            uint32 scene_id = 1;
            string scene_name = 2;  // 场景被删除时还可以在定时中显示失效的场景名
        }

        oneof Param {
            ScheduleAutoClean sche_auto_clean = 3;
            ScheduleRoomsClean sche_rooms_clean = 4;
            ScheduleCruise sche_cruise = 5;
            ScheduleSceneClean sche_scene_clean = 6;
        }
    }
    Action action = 5;
}

message TimerRequest {
    enum Method {
        DEFAULT = 0;
        ADD = 1;     // 下面 timer 字段中不带 id 字段，其他都要
        DELETE = 2;  // 下面 timer 字段中只用带 id 字段
        MOTIFY = 3;  // 下面 timer 字段中要完整的字段
        OPEN = 4;    // 下面 timer 字段中只用带 id 字段
        CLOSE = 5;   // 下面 timer 字段中只用带 id 字段
        INQUIRY = 6; // 查询/上报
        IGNORE_ONCE = 7;  // 忽略一次，下面 timer 字段中只用带 id 字段
    }
    Method method = 1;

    uint32 seq = 2;

    TimerInfo timer = 3;
}

message TimerResponse {
    TimerRequest.Method method = 1;  // 开机/失效上报 DEFAULT，其他情况跟下发相同
    uint32 seq = 2;

    message Result {
        enum Value {
            SUCCESS = 0;
            FAILED = 1;
        }
        Value value = 1;

        uint32 err_code = 2;
    }
    Result result = 3;

    // 全量上报机器中所有的定时信息
    repeated TimerInfo timers = 4;
}
